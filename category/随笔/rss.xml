<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>3clyの博客 • Posts by &#34;随笔&#34; category</title>
        <link>https://3cly.github.io</link>
        <description>一只菜狗的博客</description>
        <language>zh-CN</language>
        <pubDate>Thu, 15 Dec 2022 00:17:12 +0800</pubDate>
        <lastBuildDate>Thu, 15 Dec 2022 00:17:12 +0800</lastBuildDate>
        <category>笔记</category>
        <category>二进制</category>
        <item>
            <guid isPermalink="true">https://3cly.github.io/2022/12/15/%E9%9A%8F%E7%AC%94/</guid>
            <title>以前的杂记</title>
            <link>https://3cly.github.io/2022/12/15/%E9%9A%8F%E7%AC%94/</link>
            <category>笔记</category>
            <pubDate>Thu, 15 Dec 2022 00:17:12 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;original-entry-point-原始入口点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#original-entry-point-原始入口点&#34;&gt;#&lt;/a&gt; original entry point 原始入口点&lt;/h1&gt;
&lt;p&gt;常见脱壳知识：1.PUSHAD （压栈） 代表程序的入口点 &lt;br&gt;
2.POPAD （出栈） 代表程序的出口点，与 PUSHAD 对应，一般找到这个 OEP 就在附近拉！ &lt;br&gt;
3.OEP：程序的入口点，注意这点：软件加壳就是隐藏了 OEP（或者用了假的 OEP）， &lt;br&gt;
只要我们找到程序真正的 OEP，就可以立刻脱壳。&lt;/p&gt;
&lt;p&gt;网上说的 esp 定律脱壳时都说到 “当 esp 变红时下访问断点” 却没说明为什么，其实 od 当寄存器变化时就会变红，也就是说实质是留意堆栈什么时候变化。&lt;/p&gt;
&lt;p&gt;而把壳当成一个 call，当调用壳这个 call 时会压栈，esp 变红。&lt;/p&gt;
&lt;h1 id=&#34;c中数值的后缀&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c中数值的后缀&#34;&gt;#&lt;/a&gt; C++ 中数值的后缀&lt;/h1&gt;
&lt;p&gt;在 C++ 中，数字表达提供了一系列的后缀进行表示，如下：&lt;br&gt;
 u 或 U  表示数字是无符号整型数，如：123u，但并不说明是长整型还是短整型&lt;/p&gt;
&lt;p&gt;l 或 L  表示数字是长整型数，如：123l；而 123ul 就是无符号长整型数；而 34.4l 就是长双精度浮点数，等效于双精度浮点数&lt;/p&gt;
&lt;p&gt;i64 或 I64  表示数字是长长整型数，其是为 64 位操作系统定义的，长度比长整型数长。如：43i64&lt;/p&gt;
&lt;p&gt;f 或 F  表示数字是单精度浮点数，如：12.3f&lt;/p&gt;
&lt;p&gt;e 或 E  表示数字的次幂，如：34.4e-2 就是 0.344；0.2544e3f 表示一个单精度浮点数，值为 254.4&lt;/p&gt;
&lt;p&gt;当什么后缀都没写时，则根据有无小数点及位数来决定其具体类型，如：123 表示的是有符号整型数，而 12341434 则是有符号长整型数；而 34.43 表示双精度浮点数。&lt;/p&gt;
&lt;h1 id=&#34;杂&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#杂&#34;&gt;#&lt;/a&gt; 杂&lt;/h1&gt;
&lt;p&gt;IDA 中右击代码选择&lt;em&gt; Hide casts&lt;/em&gt;&lt;br&gt;
，可以隐藏那些看着比较乱的指针&lt;/p&gt;
&lt;p&gt;&lt;em&gt;rsp 是栈指针寄存器，64 位。指向栈顶。相当于 32 位汇编里的 esp,16 位的 sp&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如何理解栈？把瓶子倒过来&lt;/p&gt;
&lt;h1 id=&#34;huibian&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#huibian&#34;&gt;#&lt;/a&gt; huibian&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/QQ%E5%9B%BE%E7%89%8720221215153253.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;xor eax,eax&lt;/p&gt;
&lt;p&gt;是异或运算，两数相反为 1；两数相同为 0。由于这两个数相同，异或后等于清 0&lt;/p&gt;
&lt;p&gt;由于它比 mov eax,0 效率高，所以一般用它！&lt;/p&gt;
&lt;p&gt;xor eax,eax 异或后寄存器清零&lt;/p&gt;
&lt;p&gt;函数执行完后，下面的指令是 add esp,8&lt;br&gt;
 因为我们之前声明了两个变量，占用了 8 个字节，现在 add 函数调用完了，我们已经不需要了，所以将 esp+8&lt;/p&gt;
&lt;p&gt;汇编指令 retn 用来结束当前过程返回到上一调用过程&lt;/p&gt;
&lt;p&gt;当 retn 指令执行时是将 esp 指向地址的值弹出到 EIP 指令指针寄存器&lt;br&gt;
&lt;img data-src=&#34;https://pic.imgdb.cn/item/639ae551b1fccdcd3667e70c.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;smc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#smc&#34;&gt;#&lt;/a&gt; SMC&lt;/h1&gt;
&lt;p&gt;SMC（Self-Modifying  Code）（自解码），可以在一段代码执行前对它进行修改。常常利用这个特性，把代码以加密的形式保存在可自行文件中，然后在程序执行的时候进行动态解析。这样我们在采用静态分析时，看到的都是加密的内容，从而阻断了静态调试的可能性。&lt;/p&gt;
&lt;h1 id=&#34;从汇编角度理解函数调用过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#从汇编角度理解函数调用过程&#34;&gt;#&lt;/a&gt; 从汇编角度理解函数调用过程&lt;/h1&gt;
&lt;p&gt;ebp: 基地址寄存器 -&amp;gt; 栈底&lt;/p&gt;
&lt;p&gt;esp:stack pointer-&amp;gt; 栈顶&lt;/p&gt;
&lt;p&gt;参数传递 入栈 从右往左&lt;/p&gt;
&lt;p&gt;调用 function 了&lt;/p&gt;
&lt;p&gt;前面一定是&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;push ebp&lt;/strong&gt; (ebp 入栈)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mov ebp esp&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;局部变量怎么取值呢&lt;/p&gt;
&lt;p&gt;ebp 为基准&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/image-20230803144521494.png&#34; alt=&#34;image-20230803144521494&#34;&gt;&lt;/p&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/spoiler.css&#34; type=&#34;text/css&#34;&gt;&lt;script src=&#34;/js/spoiler.js&#34; type=&#34;text/javascript&#34; async&gt;&lt;/script&gt; ]]></description>
        </item>
    </channel>
</rss>
