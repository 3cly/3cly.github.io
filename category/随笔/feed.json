{
    "version": "https://jsonfeed.org/version/1",
    "title": "skyの博客 • All posts by \"随笔\" category",
    "description": "一只菜狗的博客",
    "home_page_url": "https://3cly.github.io",
    "items": [
        {
            "id": "https://3cly.github.io/2022/12/15/%E9%9A%8F%E7%AC%94/",
            "url": "https://3cly.github.io/2022/12/15/%E9%9A%8F%E7%AC%94/",
            "title": "以前的杂记",
            "date_published": "2022-12-14T16:17:12.000Z",
            "content_html": "<h1 id=\"original-entry-point-原始入口点\"><a class=\"markdownIt-Anchor\" href=\"#original-entry-point-原始入口点\">#</a> original entry point 原始入口点</h1>\n<p>常见脱壳知识：1.PUSHAD （压栈） 代表程序的入口点 <br>\n2.POPAD （出栈） 代表程序的出口点，与 PUSHAD 对应，一般找到这个 OEP 就在附近拉！ <br>\n3.OEP：程序的入口点，注意这点：软件加壳就是隐藏了 OEP（或者用了假的 OEP）， <br>\n只要我们找到程序真正的 OEP，就可以立刻脱壳。</p>\n<p>网上说的 esp 定律脱壳时都说到 “当 esp 变红时下访问断点” 却没说明为什么，其实 od 当寄存器变化时就会变红，也就是说实质是留意堆栈什么时候变化。</p>\n<p>而把壳当成一个 call，当调用壳这个 call 时会压栈，esp 变红。</p>\n<h1 id=\"c中数值的后缀\"><a class=\"markdownIt-Anchor\" href=\"#c中数值的后缀\">#</a> C++ 中数值的后缀</h1>\n<p>在 C++ 中，数字表达提供了一系列的后缀进行表示，如下：<br>\n u 或 U  表示数字是无符号整型数，如：123u，但并不说明是长整型还是短整型</p>\n<p>l 或 L  表示数字是长整型数，如：123l；而 123ul 就是无符号长整型数；而 34.4l 就是长双精度浮点数，等效于双精度浮点数</p>\n<p>i64 或 I64  表示数字是长长整型数，其是为 64 位操作系统定义的，长度比长整型数长。如：43i64</p>\n<p>f 或 F  表示数字是单精度浮点数，如：12.3f</p>\n<p>e 或 E  表示数字的次幂，如：34.4e-2 就是 0.344；0.2544e3f 表示一个单精度浮点数，值为 254.4</p>\n<p>当什么后缀都没写时，则根据有无小数点及位数来决定其具体类型，如：123 表示的是有符号整型数，而 12341434 则是有符号长整型数；而 34.43 表示双精度浮点数。</p>\n<h1 id=\"杂\"><a class=\"markdownIt-Anchor\" href=\"#杂\">#</a> 杂</h1>\n<p>IDA 中右击代码选择<em> Hide casts</em><br>\n，可以隐藏那些看着比较乱的指针</p>\n<p><em>rsp 是栈指针寄存器，64 位。指向栈顶。相当于 32 位汇编里的 esp,16 位的 sp</em></p>\n<p>如何理解栈？把瓶子倒过来</p>\n<h1 id=\"huibian\"><a class=\"markdownIt-Anchor\" href=\"#huibian\">#</a> huibian</h1>\n<p><img data-src=\"/images/QQ%E5%9B%BE%E7%89%8720221215153253.png\" alt=\"Untitled\"></p>\n<p>xor eax,eax</p>\n<p>是异或运算，两数相反为 1；两数相同为 0。由于这两个数相同，异或后等于清 0</p>\n<p>由于它比 mov eax,0 效率高，所以一般用它！</p>\n<p>xor eax,eax 异或后寄存器清零</p>\n<p>函数执行完后，下面的指令是 add esp,8<br>\n 因为我们之前声明了两个变量，占用了 8 个字节，现在 add 函数调用完了，我们已经不需要了，所以将 esp+8</p>\n<p>汇编指令 retn 用来结束当前过程返回到上一调用过程</p>\n<p>当 retn 指令执行时是将 esp 指向地址的值弹出到 EIP 指令指针寄存器<br>\n<img data-src=\"https://pic.imgdb.cn/item/639ae551b1fccdcd3667e70c.png\" alt=\"Untitled\"></p>\n<h1 id=\"smc\"><a class=\"markdownIt-Anchor\" href=\"#smc\">#</a> SMC</h1>\n<p>SMC（Self-Modifying  Code）（自解码），可以在一段代码执行前对它进行修改。常常利用这个特性，把代码以加密的形式保存在可自行文件中，然后在程序执行的时候进行动态解析。这样我们在采用静态分析时，看到的都是加密的内容，从而阻断了静态调试的可能性。</p>\n<h1 id=\"从汇编角度理解函数调用过程\"><a class=\"markdownIt-Anchor\" href=\"#从汇编角度理解函数调用过程\">#</a> 从汇编角度理解函数调用过程</h1>\n<p>ebp: 基地址寄存器 -&gt; 栈底</p>\n<p>esp:stack pointer-&gt; 栈顶</p>\n<p>参数传递 入栈 从右往左</p>\n<p>调用 function 了</p>\n<p>前面一定是</p>\n<p><strong>push ebp</strong> (ebp 入栈)</p>\n<p><strong>mov ebp esp</strong></p>\n<p>局部变量怎么取值呢</p>\n<p>ebp 为基准</p>\n<p><img data-src=\"/images/image-20230803144521494.png\" alt=\"image-20230803144521494\"></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "笔记"
            ]
        }
    ]
}